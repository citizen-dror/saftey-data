{"version":3,"sources":["components/atoms/ButtonToggle.tsx","components/organisms/MyImageGallery.tsx"],"names":["ButtonToggle","condtion","textTrue","textFalse","disabled","onClick","t","useTranslation","className","variant","styleCol","display","justifyContent","MyImageGallery","observer","type","useStore","imageStore","uiStore","getImages","setCurrImage","imageList","tagsArr","setCurrTag","currTag","language","isRTL","useEffect","titleKey","destkey","arrayImagesProps","toJS","images","map","x","original","filename","thumbnail","originalTitle","description","isGotImages","length","md","style","id","value","data","onChange","val","xs","ImageTitle","ButtonToggleHideDescription","items","onSlide","currentIndex","handleOnSlide","ImageMsg","styleButtonToggle","width","hideDescription","toggleHideDescription","styleTitle","textAlign","fontWeight","fontSize","margin","currImage","title","isLoading"],"mappings":"mGACA,kCA0BeA,IAfwB,SAAC,GAExB,IADdC,EACa,EADbA,SAAUC,EACG,EADHA,SAAUC,EACP,EADOA,UACP,IADkBC,gBAClB,SADoCC,EACpC,EADoCA,QAEzCC,EAAMC,cAAND,EACR,OACE,cAAC,IAAD,CACEE,UAAU,SACVC,QAAQ,UACRL,SAAYA,EACZC,QAAS,WAAQA,KAJnB,SAMcC,EAAXL,EAAaC,EAAcC,O,iCCvBlC,gIAsBMO,EAAgC,CACpCC,QAAS,OACTC,eAAgB,UAGZC,EAAkCC,aAAS,YAAe,IAAZC,EAAW,EAAXA,KAAW,EAC7BC,cAAxBC,EADqD,EACrDA,WAAYC,EADyC,EACzCA,QAElBC,EACEF,EADFE,UAAWC,EACTH,EADSG,aAAcC,EACvBJ,EADuBI,UAAWC,EAClCL,EADkCK,QAASC,EAC3CN,EAD2CM,WAAYC,EACvDP,EADuDO,QAEnDC,EAAaP,EAAbO,SACFC,EAAsB,OAAbD,EACfE,qBAAU,WACRR,EAAUJ,KACT,CAACI,EAAWJ,IACf,IAAMa,EAAQ,eAAWH,GACnBI,EAAO,cAAUJ,GACjBK,EAAmBC,YAAKV,GACxBW,EAASF,EAAiBG,KAAI,SAACC,GAAD,MAAa,CAC/CC,SAAUD,EAAEE,SACZC,UAAWH,EAAEE,SACbE,cAAeJ,EAAEN,GACjBW,YAAaL,EAAEL,OAEXW,EAAeR,EAAOS,OAAS,EAMrC,OACE,eAAC,IAAD,WACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAKC,GAAI,EAAGC,MAAOjC,EAAnB,SACE,cAAC,IAAD,CACEkC,GAAG,wBACHC,MAAOrB,EACPsB,KAAMxB,EACNyB,SAAU,SAACC,GAAD,OAAiBzB,EAAWyB,QAI1C,cAAC,IAAD,CAAKC,GAAI,GAAIP,GAAI,EAAjB,SACGF,GAAe,cAACU,EAAD,MAElB,cAAC,IAAD,CAAKR,GAAI,EAAGC,MAAOjC,EAAnB,SACG8B,GAAe,cAACW,EAAD,SAGpB,uBACCX,GACC,cAAC,IAAD,CACEY,MAAOpB,EACPN,MAAOA,EACP2B,QAAS,SAACC,GAAD,OA7BK,SAACA,GAErB,OADIxB,EAAiBW,OAAS,GAAGrB,EAAaU,EAAiBwB,KACxD,EA2BkCC,CAAcD,OAGnDd,GAAe,cAACgB,EAAD,UAKjBC,EAAoB,CACxBC,MAAO,QAEHP,EAA4CrC,aAAS,WAAO,IACxDG,EAAeD,cAAfC,WACA0C,EAA2C1C,EAA3C0C,gBAAiBC,EAA0B3C,EAA1B2C,sBACzB,OACE,qBAAKjB,MAAOc,EAAZ,SACE,cAAC,IAAD,CACExD,SAAU0D,EACVzD,SAAS,mBACTC,UAAU,mBACVE,QAASuD,SAMXC,EAAkC,CACtCC,UAAW,SACXC,WAAY,IACZC,SAAU,GACVC,OAAQ,QAEJf,EAA2BpC,aAAS,WAAO,IAAD,EACdE,cAAxBC,EADsC,EACtCA,WAAYC,EAD0B,EAC1BA,QACZgD,EAAcjD,EAAdiD,UACAzC,EAAaP,EAAbO,SACFG,EAAQ,eAAWH,GAEnB0C,EAA+B,OAAdD,EAAsBA,EAAUtC,GAAY,GACnE,OACE,qBAAKe,MAAOkB,EAAZ,SAAyBM,OAIvBX,EAAyB1C,aAAS,WAAO,IACrCR,EAAMC,cAAND,EAEA8D,EADepD,cAAfC,WACAmD,UACR,OACE,+BAAO,UAAiB9D,EAAhB8D,EAAkB,UAAoB,0BAInCvD","file":"static/js/11.5941a476.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\ninterface IProps {\r\n  condtion: boolean,\r\n  textTrue: string,\r\n  textFalse: string,\r\n  disabled?: boolean,\r\n  onClick: () => void\r\n}\r\nconst ButtonToggle: React.FC<IProps> = ({\r\n  condtion, textTrue, textFalse, disabled = false ,onClick,\r\n} : IProps) => {\r\n  const { t } = useTranslation();\r\n  return (\r\n    <Button\r\n      className=\"btn-sm\"\r\n      variant=\"primary\"\r\n      disabled = {disabled}\r\n      onClick={() => { onClick(); }}\r\n    >\r\n      {condtion ? t(textTrue) : t(textFalse)}\r\n    </Button>\r\n  );\r\n};\r\nexport default ButtonToggle;\r\n","import React, { useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from 'mobx-react';\r\nimport { toJS } from 'mobx';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ImageGallery from 'react-image-gallery';\r\nimport 'react-image-gallery/styles/css/image-gallery.css';\r\nimport ButtonToggle from '../atoms/ButtonToggle';\r\nimport Select from '../atoms/Select';\r\nimport { useStore } from '../../stores/storeConfig';\r\nimport SmallCard2 from '../atoms/SmallCard2';\r\n\r\ninterface Props {\r\n  type: string;\r\n}\r\n// const styleCard: React.CSSProperties = {\r\n//   borderRadius: '5px',\r\n//   padding: '5px',\r\n//   margin: '7px',\r\n//   width: '80%',\r\n// };\r\nconst styleCol: React.CSSProperties = {\r\n  display: 'flex',\r\n  justifyContent: 'center',\r\n};\r\n\r\nconst MyImageGallery: React.FC<Props> = observer(({ type }) => {\r\n  const { imageStore, uiStore } = useStore();\r\n  const {\r\n    getImages, setCurrImage, imageList, tagsArr, setCurrTag, currTag,\r\n  } = imageStore;\r\n  const { language } = uiStore;\r\n  const isRTL = (language !== 'en');\r\n  useEffect(() => {\r\n    getImages(type);\r\n  }, [getImages, type]);\r\n  const titleKey = `title${language}`;\r\n  const destkey = `text${language}`;\r\n  const arrayImagesProps = toJS(imageList);\r\n  const images = arrayImagesProps.map((x: any) => ({\r\n    original: x.filename,\r\n    thumbnail: x.filename,\r\n    originalTitle: x[titleKey],\r\n    description: x[destkey],\r\n  }));\r\n  const isGotImages = (images.length > 0);\r\n  const handleOnSlide = (currentIndex: number) => {\r\n    if (arrayImagesProps.length > 0) setCurrImage(arrayImagesProps[currentIndex]);\r\n    return true;\r\n  };\r\n\r\n  return (\r\n    <SmallCard2>\r\n      <Row >\r\n        <Col md={3} style={styleCol}>\r\n          <Select\r\n            id='exampleForm.SelectTag'\r\n            value={currTag}\r\n            data={tagsArr}\r\n            onChange={(val: string) => setCurrTag(val)}\r\n          />\r\n          {/* <SelectImageByTag onChange={(val: string) => setCurrTag(val)} /> */}\r\n        </Col>\r\n        <Col xs={12} md={6}>\r\n          {isGotImages && <ImageTitle />}\r\n        </Col>\r\n        <Col md={3} style={styleCol}>\r\n          {isGotImages && <ButtonToggleHideDescription />}\r\n        </Col>\r\n      </Row>\r\n      <hr />\r\n      {isGotImages && (\r\n        <ImageGallery\r\n          items={images}\r\n          isRTL={isRTL}\r\n          onSlide={(currentIndex: number) => handleOnSlide(currentIndex)}\r\n        />\r\n      )}\r\n      {!isGotImages && <ImageMsg />}\r\n    </SmallCard2>\r\n  );\r\n});\r\n\r\nconst styleButtonToggle = {\r\n  width: 'auto'\r\n};\r\nconst ButtonToggleHideDescription: React.FC<{}> = observer(() => {\r\n  const { imageStore } = useStore();\r\n  const { hideDescription, toggleHideDescription } = imageStore;\r\n  return (\r\n    <div style={styleButtonToggle}>\r\n      <ButtonToggle\r\n        condtion={hideDescription}\r\n        textTrue=\"show-description\"\r\n        textFalse=\"hide-description\"\r\n        onClick={toggleHideDescription}\r\n      />\r\n    </div>\r\n  );\r\n});\r\n\r\nconst styleTitle: React.CSSProperties = {\r\n  textAlign: 'center',\r\n  fontWeight: 700,\r\n  fontSize: 18,\r\n  margin: '10px',\r\n};\r\nconst ImageTitle: React.FC<{}> = observer(() => {\r\n  const { imageStore, uiStore } = useStore();\r\n  const { currImage } = imageStore;\r\n  const { language } = uiStore;\r\n  const titleKey = `title${language}`;\r\n  // @ts-ignore\r\n  const title: string = (currImage !== null) ? currImage[titleKey] : '';\r\n  return (\r\n    <div style={styleTitle}>{title}</div>\r\n  );\r\n});\r\n\r\nconst ImageMsg: React.FC<{}> = observer(() => {\r\n  const { t } = useTranslation();\r\n  const { imageStore } = useStore();\r\n  const { isLoading } = imageStore;\r\n  return (\r\n    <span>{(isLoading) ? `${t('Loading')}` : `${t('not-found-images')}`}</span>\r\n  );\r\n});\r\n\r\nexport default MyImageGallery;\r\n"],"sourceRoot":""}