{"version":3,"sources":["components/atoms/SelectGroupBy.tsx","components/atoms/SelectGroupBy2.tsx","components/molecules/chart/ChartBar.tsx","components/molecules/chart/ConfigChart.tsx","assets/SvgIconSettings.tsx","components/organisms/GroupByGraphsPanel.tsx"],"names":["SelectGroupBy","observer","id","labelText","t","useTranslation","filterStore","useStore","groupByDict","groupBy","updateGroupby","lable","Label","className","onSelectChange","useCallback","event","target","value","Group","controlId","style","display","flexDirection","Control","as","text","onChange","Object","entries","map","key","x","SelectGroupBy2","group2Dict","groupBy2","updateGroupBy2","ChartBar","dataChart","data","metaData","chartType","dir","height","fill","undefined","labels","_id","vals","count","datasets","label","backgroundColor","length","defColor","getColorPallete","borderColor","borderWidth","hoverBorderColor","color","hoverBackgroundColor","row","align","options1","responsive","maintainAspectRatio","scales","yAxes","ticks","beginAtZero","min","plugins","datalabels","options","ConfigChart","uiStore","chartTypeList","updateChartType","showPercentageChart","updateShowPercentageChart","Form","Checkbox","group","checked","e","SvgIconSettings","props","width","xmlns","viewBox","d","React","memo","GroupByGraphsPanel","dataByYears","toJS","Fragment","Row","Col","md","CardChartYears","CardChartByGroup1","CardChartGrpBy2","dataFilterdByYears","casualtiesNames","direction","reactData2","SmallCard2","styleType","header","styles","divConfig","justifyContent","divChart","useState","showModel","setShowModal","dataFilterd","reactData3","chart","memoSettingsIcon","useMemos","Button","onClick","ConfigModal","title","showModal","setShow","styleLable","fontWeight","marginTop","marginLeft","marginRight","metaDAta","getBars","reactDataGrp2","dataGroupby2","flexWrap"],"mappings":"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","file":"static/js/9.1e263714.chunk.js","sourcesContent":["import React, { ChangeEvent, useCallback } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from 'mobx-react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { useStore } from '../../stores/storeConfig';\r\n// import Select from './Select';\r\n\r\ninterface IProps {\r\n  id: string,\r\n  labelText?: string,\r\n}\r\nconst SelectGroupBy: React.FC<IProps> = observer(({ id, labelText = 'GroupBy' }) => {\r\n  const { t } = useTranslation();\r\n  const { filterStore } = useStore();\r\n  const { groupByDict, groupBy, updateGroupby } = filterStore;\r\n  const lable = (labelText !== '') ? (\r\n    <Form.Label className=\"filterLable\">\r\n      {' '}\r\n      {t(labelText)}:\r\n    </Form.Label>\r\n  ) : null;\r\n  const onSelectChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\r\n    updateGroupby(event.target.value);\r\n  }, [updateGroupby]);\r\n  //const data = Object.entries(groupByDict).map(([key, x]: any[])=> {return {val: x.text, text: x.text ,key: key }});\r\n  \r\n  return (\r\n  \r\n  //   <Select \r\n  //   id= {`GrupForm.${id}.SelectGroupBy`}\r\n  //   label = {labelText}\r\n  //   data = {data}\r\n  //   value={groupBy.text}\r\n  //   onChange={updateGroupby}\r\n  // />\r\n     <Form className=\"form-inline\">\r\n      <Form.Group controlId={`GrupForm.${id}.SelectGroupBy`}>\r\n        <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n          {lable}\r\n          <Form.Control\r\n            as=\"select\"\r\n            value={groupBy.text}\r\n            onChange={onSelectChange}\r\n            className=\"form-select form-select-sm\"\r\n          >\r\n            {Object.entries(groupByDict)\r\n              .map(([key, x]: any[]) => (<option value={x.text} key={key}>{t(x.text)}</option>))}\r\n          </Form.Control>\r\n        </div>\r\n      </Form.Group>\r\n    </Form>\r\n  );\r\n});\r\nexport default SelectGroupBy;\r\n","import React, { ChangeEvent, useCallback } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from 'mobx-react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { useStore } from '../../stores/storeConfig';\r\n\r\n\r\ninterface IProps { id: string }\r\n\r\nconst SelectGroupBy2: React.FC<IProps> = observer(({ id }) => {\r\n  const { t } = useTranslation();\r\n  const { filterStore } = useStore();\r\n  const { group2Dict, groupBy2, updateGroupBy2 } = filterStore;\r\n  const onSelectChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\r\n    updateGroupBy2(event.target.value);\r\n  }, [updateGroupBy2]);\r\n  return (\r\n    <Form className=\"form-inline\">\r\n      <Form.Group controlId={`GrupForm.${id}.SelectGroupBy2`}>\r\n        {/* <Form.Label className=\"filterLable\"> {t('GroupBy')}:</Form.Label> */}\r\n        <Form.Control\r\n          as=\"select\"\r\n          value={groupBy2.text}\r\n          onChange={onSelectChange}\r\n          className=\"form-select form-select-sm\"\r\n        >\r\n          {Object.entries(group2Dict)\r\n            .map(([key, x]: any[]) => (<option value={x.text} key={key}>{t(x.text)}</option>))\r\n          }\r\n        </Form.Control>\r\n      </Form.Group>\r\n    </Form>\r\n  );\r\n});\r\nexport default SelectGroupBy2;\r\n","import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Bar, HorizontalBar, Pie } from 'react-chartjs-2';\r\nimport 'chartjs-plugin-datalabels';\r\n\r\ninterface IProps {\r\n  data: readonly any[];\r\n  metaData?: any[];\r\n  chartType?: string;\r\n  height?: number;\r\n  fill?: string;\r\n  dir: string;\r\n}\r\n\r\nconst getColorPallete = (chartType: string, length: number, defColor: string) => {\r\n  let res;\r\n  if (chartType === 'PieChart') {\r\n    if (length < 3)\r\n      res = ['#031E47', '#6791B2']\r\n    else if (length < 6)\r\n      res = ['#031E47', '#24446B', '#466B8F', '#6791B2', '#88B7D6']\r\n    else {\r\n      res = ['#031E47', '#19385F', '#2F5177', '#466B8F', '#5C84A6', '#729EBE', '#88B7D6',\r\n        '#07681F', '#2D7B2C', '#538E39', '#7AA146', '#A0B352', '#C6C65F', '#ECD96C',\r\n        '#540455', '#671E6A', '#7A377F', '#8D5194', '#A06BA9', '#B384BE', '#C69ED3'\r\n      ];\r\n    }\r\n  }\r\n  else {\r\n    res = defColor;\r\n  }\r\n  return res;\r\n};\r\n\r\nconst ChartBar: React.FC<IProps> = ({ data, metaData, chartType = 'BarChart', height = 60, dir, fill = '#8884d8', }: IProps) => {\r\n  const { t } = useTranslation();\r\n  let dataChart;\r\n  // if metaData == undefined - chart of 1 group\r\n  if (metaData == undefined) {\r\n    const labels = data.map((x) => x._id);\r\n    const vals = data.map((x) => x.count);\r\n    const label = t('casualties');\r\n    const backgroundColor = getColorPallete(chartType, data.length, fill);\r\n    dataChart = {\r\n      labels,\r\n      datasets: [\r\n        {\r\n          label,\r\n          backgroundColor: backgroundColor,\r\n          borderColor: 'rgba(255,255,255,0.7)',\r\n          borderWidth: 1,\r\n          // hoverBackgroundColor: 0.7,\r\n          hoverBorderColor: 'rgba(255,99,132,1)',\r\n          data: vals,\r\n        },\r\n      ],\r\n    };\r\n  }\r\n  else {\r\n    const labels = data.map((x) => x._id);\r\n    const datasets1 = metaData.map((x: any) => {\r\n      const name = t(x.key);\r\n      const fill = x.color;\r\n      const vals = data.map((row) => row[x.key]);\r\n      return {\r\n        label: name,\r\n        backgroundColor: fill,\r\n        hoverBackgroundColor: 'rgba(255,99,132,0.4)',\r\n        hoverBorderColor: 'rgba(255,99,132,1)',\r\n        data: vals,\r\n      };\r\n    });\r\n    dataChart = {\r\n      labels,\r\n      datasets: datasets1,\r\n    };\r\n  };\r\n  const align = (dir === 'rtl') ? 'right' : 'center';\r\n  const options1 = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    scales: {\r\n      yAxes: [{\r\n        ticks: {\r\n          beginAtZero: true,\r\n          min: 0,\r\n        },\r\n      }],\r\n    },\r\n    plugins: {\r\n      datalabels: {\r\n        display: true,\r\n        color: 'white',\r\n        align: align\r\n      }\r\n    }\r\n  };\r\n  if (chartType === 'BarChart') {\r\n    return (\r\n      <Bar\r\n        data={dataChart}\r\n        //height={height}\r\n        options={options1}\r\n      />\r\n    );\r\n  }\r\n  if (chartType === 'HorizontalBar') {\r\n    return (\r\n      <HorizontalBar\r\n        data={dataChart}\r\n        options={\r\n          {\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n            plugins: {\r\n              datalabels: {\r\n                display: true,\r\n                color: 'white',\r\n                align: align\r\n              }\r\n            }\r\n          }}\r\n      />\r\n    );\r\n  }\r\n  return (\r\n    <Pie\r\n      data={dataChart}\r\n      options={{\r\n        responsive: true,\r\n        plugins: {\r\n          datalabels: {\r\n            display: true,\r\n            color: 'white',\r\n            align: align\r\n          }\r\n        }\r\n      }}\r\n    />\r\n  );\r\n};\r\nexport default ChartBar;\r\n","import React, { ChangeEvent, useCallback } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from 'mobx-react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Checkbox from '../../atoms/Checkbox';\r\nimport { useStore } from '../../../stores/storeConfig';\r\n\r\ninterface IProps { }\r\nconst ConfigChart: React.FC<IProps> = observer(() => {\r\n  const { t } = useTranslation();\r\n  const { uiStore } = useStore();\r\n  const {\r\n    chartType, chartTypeList, updateChartType, showPercentageChart, updateShowPercentageChart,\r\n  } = uiStore;\r\n  const onSelectChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\r\n    updateChartType(event.target.value);\r\n  }, [updateChartType]);\r\n  return (\r\n    <div>\r\n      <Form.Group controlId=\"ConfigFile.SelectChartType\">\r\n        {t('ChartType')}\r\n        <Form.Control\r\n          as=\"select\"\r\n          value={chartType}\r\n          onChange={onSelectChange}\r\n        >\r\n          {Object.entries(chartTypeList)\r\n            .map(([key, x]: any[]) => (<option value={x} key={key}>{t(x)}</option>))}\r\n        </Form.Control>\r\n      </Form.Group>\r\n      <Form.Group controlId=\"ConfigFile.ControlShowPercentageChart\">\r\n        <Checkbox\r\n          key={2}\r\n          label=\"PercentageChart\"\r\n          group=\"ChartConfig\"\r\n          id={2}\r\n          checked={showPercentageChart}\r\n          onChange={(e: ChangeEvent<HTMLInputElement>) => {\r\n            updateShowPercentageChart(e.target.checked);\r\n          }}\r\n        />\r\n      </Form.Group>\r\n    </div>\r\n  );\r\n});\r\nexport default ConfigChart;\r\n","import React from \"react\"\r\n\r\nfunction SvgIconSettings(props: React.SVGProps<SVGSVGElement>) {\r\n  const color = (props.color) ? props.color : 'blue';\r\n  const height = (props.height) ? props.height : 24;\r\n  const width = (props.width) ? props.width : 24;\r\n  return (\r\n    <svg\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      height={height}\r\n      viewBox=\"0 0 24 24\"\r\n      width={width}\r\n      {...props}\r\n    >\r\n      <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\r\n      <path d=\"M19.14 12.94c.04-.3.06-.61.06-.94 0-.32-.02-.64-.07-.94l2.03-1.58a.49.49 0 00.12-.61l-1.92-3.32a.488.488 0 00-.59-.22l-2.39.96c-.5-.38-1.03-.7-1.62-.94l-.36-2.54a.484.484 0 00-.48-.41h-3.84c-.24 0-.43.17-.47.41l-.36 2.54c-.59.24-1.13.57-1.62.94l-2.39-.96c-.22-.08-.47 0-.59.22L2.74 8.87c-.12.21-.08.47.12.61l2.03 1.58c-.05.3-.09.63-.09.94s.02.64.07.94l-2.03 1.58a.49.49 0 00-.12.61l1.92 3.32c.12.22.37.29.59.22l2.39-.96c.5.38 1.03.7 1.62.94l.36 2.54c.05.24.24.41.48.41h3.84c.24 0 .44-.17.47-.41l.36-2.54c.59-.24 1.13-.56 1.62-.94l2.39.96c.22.08.47 0 .59-.22l1.92-3.32c.12-.22.07-.47-.12-.61l-2.01-1.58zM12 15.6c-1.98 0-3.6-1.62-3.6-3.6s1.62-3.6 3.6-3.6 3.6 1.62 3.6 3.6-1.62 3.6-3.6 3.6z\"\r\n        fill={color} />\r\n    </svg>\r\n  )\r\n}\r\n\r\nexport default React.memo(SvgIconSettings);","import React, { useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from 'mobx-react';\r\nimport { toJS } from 'mobx';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { useStore } from '../../stores/storeConfig';\r\nimport SelectGroupBy from '../atoms/SelectGroupBy';\r\nimport SelectGroupBy2 from '../atoms/SelectGroupBy2';\r\nimport ChartBar from '../molecules/chart/ChartBar';\r\nimport ConfigModal from './ConfigModal';\r\nimport ConfigChart from '../molecules/chart/ConfigChart';\r\nimport {useMemos} from '../../hooks/myUseMemo';\r\nimport SvgIconSettings from '../../assets/SvgIconSettings';\r\nimport SmallCard2 from '../atoms/SmallCard2';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\ninterface IProps { }\r\n// const getSize = (width: number) => {\r\n//    let size: number = 500;\r\n//    if (width <= 350) size = 300;\r\n//    else if (width <= 770) size = width * 0.8;\r\n//    else if (width <= 1200) size = (width - 300) * 0.9;\r\n//    else size = 1000;\r\n//    return size;\r\n// };\r\n\r\nexport const GroupByGraphsPanel: React.FC<IProps> = observer(() => {\r\n   const { filterStore } = useStore();\r\n   const { dataByYears } = filterStore;\r\n   const reactData1 = toJS(dataByYears);\r\n\r\n   if (reactData1.length > 0) {\r\n      return (\r\n         <React.Fragment>\r\n            <Row>\r\n               <Col md={4}>\r\n                  <CardChartYears />\r\n               </Col>\r\n               <Col md={8} >\r\n                  <CardChartByGroup1 />\r\n               </Col>\r\n            </Row>\r\n            <Row>\r\n               <Col md={12}>\r\n                  <CardChartGrpBy2 />\r\n               </Col>\r\n            </Row>\r\n         </React.Fragment>\r\n      );\r\n   }\r\n   return null;\r\n});\r\n\r\nconst CardChartYears: React.FC<IProps> = observer(() => {\r\n   const { t } = useTranslation();\r\n   const { filterStore, uiStore } = useStore();\r\n   const { dataFilterdByYears, casualtiesNames } = filterStore;\r\n   const { direction } = uiStore;\r\n   const reactData2 = toJS(dataFilterdByYears);\r\n   const styles = {\r\n      divChart: {\r\n         width: '100%',\r\n         height: '60vh',\r\n      },\r\n   };\r\n   return (\r\n      <SmallCard2 styleType={2} header={`${t(casualtiesNames)} ${t('by-years')}`}>\r\n         <div style={styles.divChart}>\r\n            <ChartBar data={reactData2} fill=\"#FE9772\" dir={direction} />\r\n         </div>\r\n      </SmallCard2>\r\n   );\r\n});\r\n\r\nconst CardChartByGroup1: React.FC<IProps> = observer(() => {\r\n   const styles = {\r\n      divConfig: {\r\n         display: 'flex',\r\n         justifyContent: 'space-between',\r\n      },\r\n      divChart: {\r\n         width: '100%',\r\n         height: '60vh',\r\n      },\r\n   };\r\n   // const { t } = useTranslation();\r\n   const [showModel, setShowModal] = useState(false);\r\n   const { filterStore, uiStore } = useStore();\r\n   const { dataFilterd } = filterStore;\r\n   const reactData3 = toJS(dataFilterd);\r\n   const { chartType, direction } = uiStore;\r\n   const chart = <ChartBar \r\n      data={reactData3} \r\n      fill=\"#8884d8\" \r\n      chartType={chartType} \r\n      height={150} \r\n      dir={direction}\r\n      />;\r\n   const memoSettingsIcon = useMemos([], \r\n      <SvgIconSettings color={'var(--onprimary-color)'} />\r\n      );\r\n   // const memoSettingsIcon = <SvgIconSettings color={'var(--onprimary-color)'} />;   \r\n   return (\r\n      <SmallCard2>\r\n         <div style={styles.divConfig}>\r\n            <SelectGroupBy id=\"Graphs.Main\" />\r\n            <Button onClick={() => { setShowModal(!showModel); }}>\r\n               {memoSettingsIcon}\r\n            </Button>\r\n         </div>\r\n         <ConfigModal title=\"Chart Options\" showModal={showModel} setShow={setShowModal}>\r\n            <ConfigChart />\r\n         </ConfigModal>\r\n         <div >\r\n            <hr />\r\n            <div style={styles.divChart} >\r\n               {chart}\r\n            </div>\r\n         </div>\r\n      </SmallCard2>\r\n   );\r\n});\r\n\r\nconst CardChartGrpBy2: React.FC<IProps> = observer(() => {\r\n   const styles = {\r\n      styleLable: {\r\n         fontWeight: 700,\r\n         marginTop: '5px',\r\n         marginLeft: '20px',\r\n         marginRight: '20px',\r\n      },\r\n      divChart: {\r\n         width: '100%',\r\n         height: '60vh',\r\n      },\r\n   }\r\n   const divConstolsRow= {\r\n      display: 'flex',\r\n      flexWrap: 'wrap',\r\n   } as React.CSSProperties;\r\n   const { t } = useTranslation();\r\n   const { filterStore, uiStore } = useStore();\r\n   const { groupBy2 } = filterStore;\r\n   const { chartType, direction } = uiStore;\r\n   const metaDAta = groupBy2.getBars();\r\n   const reactDataGrp2 = toJS(filterStore.dataGroupby2);\r\n   const show = true;\r\n   return (\r\n      <div>\r\n         {show\r\n            && (\r\n               <SmallCard2>\r\n                  <div style={divConstolsRow}>\r\n                     <span style={styles.styleLable}>\r\n                        {' '}\r\n                        {t('GroupBy')}\r\n                        {' '}\r\n                  :\r\n                </span>\r\n                     <SelectGroupBy id=\"Graphs.Grp2\" labelText=\"\" />\r\n                     {' '}\r\n                &nbsp;\r\n                <SelectGroupBy2 id=\"Graphs\" />\r\n                     {/* <RangeSlider id=\"Graphs\" label=\"resize\" value={80} onChange={onSizeSliderChange}/> */}\r\n                  </div>\r\n                  <hr />\r\n                  <div style={styles.divChart}>\r\n                     <ChartBar data={reactDataGrp2} metaData={metaDAta} chartType={chartType} dir={direction}/>\r\n                  </div>\r\n               </SmallCard2>\r\n            )}\r\n      </div>\r\n   );\r\n});\r\n\r\nexport default GroupByGraphsPanel;\r\n"],"sourceRoot":""}