{"version":3,"sources":["components/atoms/ButtonToggle.tsx","components/atoms/SelectImageByTag.tsx","components/organisms/MyImageGallery.tsx"],"names":["ButtonToggle","condtion","textTrue","textFalse","disabled","onClick","t","useTranslation","className","variant","styleSelect","width","SelectImageByTag","observer","onChange","Form","Group","as","Col","controlId","Control","style","e","target","value","styleCol","display","justifyContent","MyImageGallery","type","useStore","imageStore","uiStore","getImages","setCurrImage","imageList","setCurrTag","language","isRTL","useEffect","titleKey","destkey","arrayImagesProps","toJS","images","map","x","original","filename","thumbnail","originalTitle","description","isGotImages","length","SmallCard2","Row","md","val","xs","ImageTitle","ButtonToggleHideDescription","items","onSlide","currentIndex","handleOnSlide","ImageMsg","styleButtonToggle","hideDescription","toggleHideDescription","styleTitle","textAlign","fontWeight","fontSize","margin","currImage","title","isLoading"],"mappings":"mGACA,kCA0BeA,IAfwB,SAAC,GAExB,IADdC,EACa,EADbA,SAAUC,EACG,EADHA,SAAUC,EACP,EADOA,UACP,IADkBC,gBAClB,SADoCC,EACpC,EADoCA,QAEzCC,EAAMC,cAAND,EACR,OACE,cAAC,IAAD,CACEE,UAAU,SACVC,QAAQ,UACRL,SAAYA,EACZC,QAAS,WAAQA,KAJnB,SAMcC,EAAXL,EAAaC,EAAcC,O,+ICd5BO,EAAc,CAClBC,MAAO,SA8BMC,EA3B2CC,aAAS,YAAmB,IAAhBC,EAAe,EAAfA,SAC5DR,EAAMC,cAAND,EACR,OACE,8BACE,cAACS,EAAA,EAAKC,MAAN,CAAYC,GAAIC,IAAKC,UAAU,wBAA/B,SAIE,eAACJ,EAAA,EAAKK,QAAN,CACEH,GAAG,SACHT,UAAU,6BACVa,MAAOX,EACPI,SAAU,SAACQ,GAA6CR,EAASQ,EAAEC,OAAOC,QAJ5E,UAME,wBAAQA,MAAM,2BAAd,SAAsBlB,EAAE,aACxB,wBAAQkB,MAAM,oDAAd,SAA2BlB,EAAE,gBAC7B,wBAAQkB,MAAM,4EAAd,SAA+BlB,EAAE,aACjC,wBAAQkB,MAAM,sEAAd,SAA8BlB,EAAE,gBAChC,wBAAQkB,MAAM,6CAAd,SAAyBlB,EAAE,SAC3B,wBAAQkB,MAAM,yDAAd,SAA2BlB,EAAE,SAC7B,wBAAQkB,MAAM,iCAAd,SAAuBlB,EAAE,oB,iBCX7BmB,EAAgC,CACpCC,QAAS,OACTC,eAAgB,UAGZC,EAAkCf,aAAS,YAAe,IAAZgB,EAAW,EAAXA,KAAW,EAC7BC,cAAxBC,EADqD,EACrDA,WAAYC,EADyC,EACzCA,QAElBC,EACEF,EADFE,UAAWC,EACTH,EADSG,aAAcC,EACvBJ,EADuBI,UAAWC,EAClCL,EADkCK,WAE9BC,EAAaL,EAAbK,SACFC,EAAsB,OAAbD,EACfE,qBAAU,WACRN,EAAUJ,KACT,CAACI,EAAWJ,IACf,IAAMW,EAAQ,eAAWH,GACnBI,EAAO,cAAUJ,GACjBK,EAAmBC,YAAKR,GACxBS,EAASF,EAAiBG,KAAI,SAACC,GAAD,MAAa,CAC/CC,SAAUD,EAAEE,SACZC,UAAWH,EAAEE,SACbE,cAAeJ,EAAEN,GACjBW,YAAaL,EAAEL,OAEXW,EAAeR,EAAOS,OAAS,EAKrC,OACE,eAACC,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,WACE,cAACrC,EAAA,EAAD,CAAKsC,GAAI,EAAGnC,MAAOI,EAAnB,SACE,cAAC,EAAD,CAAkBX,SAAU,SAAC2C,GAAD,OAAiBrB,EAAWqB,QAE1D,cAACvC,EAAA,EAAD,CAAKwC,GAAI,GAAIF,GAAI,EAAjB,SACGJ,GAAe,cAACO,EAAD,MAElB,cAACzC,EAAA,EAAD,CAAKsC,GAAI,EAAGnC,MAAOI,EAAnB,SACG2B,GAAe,cAACQ,EAAD,SAGpB,uBACCR,GACC,cAAC,IAAD,CACES,MAAOjB,EACPN,MAAOA,EACPwB,QAAS,SAACC,GAAD,OAtBK,SAACA,GAErB,OADIrB,EAAiBW,OAAS,GAAGnB,EAAaQ,EAAiBqB,KACxD,EAoBkCC,CAAcD,OAGnDX,GAAe,cAACa,EAAD,UAKjBC,EAAoB,CACxBvD,MAAO,QAEHiD,EAA4C/C,aAAS,WAAO,IACxDkB,EAAeD,cAAfC,WACAoC,EAA2CpC,EAA3CoC,gBAAiBC,EAA0BrC,EAA1BqC,sBACzB,OACE,qBAAK/C,MAAO6C,EAAZ,SACE,cAAClE,EAAA,EAAD,CACEC,SAAUkE,EACVjE,SAAS,mBACTC,UAAU,mBACVE,QAAS+D,SAMXC,EAAkC,CACtCC,UAAW,SACXC,WAAY,IACZC,SAAU,GACVC,OAAQ,QAEJd,EAA2B9C,aAAS,WAAO,IAAD,EACdiB,cAAxBC,EADsC,EACtCA,WAAYC,EAD0B,EAC1BA,QACZ0C,EAAc3C,EAAd2C,UACArC,EAAaL,EAAbK,SACFG,EAAQ,eAAWH,GAEnBsC,EAA+B,OAAdD,EAAsBA,EAAUlC,GAAY,GACnE,OACE,qBAAKnB,MAAOgD,EAAZ,SAAyBM,OAIvBV,EAAyBpD,aAAS,WAAO,IACrCP,EAAMC,cAAND,EAEAsE,EADe9C,cAAfC,WACA6C,UACR,OACE,+BAAO,UAAiBtE,EAAhBsE,EAAkB,gBAAqB,0BAIpChD","file":"static/js/11.a67c2d17.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\ninterface IProps {\r\n  condtion: boolean,\r\n  textTrue: string,\r\n  textFalse: string,\r\n  disabled?: boolean,\r\n  onClick: () => void\r\n}\r\nconst ButtonToggle: React.FC<IProps> = ({\r\n  condtion, textTrue, textFalse, disabled = false ,onClick,\r\n} : IProps) => {\r\n  const { t } = useTranslation();\r\n  return (\r\n    <Button\r\n      className=\"btn-sm\"\r\n      variant=\"primary\"\r\n      disabled = {disabled}\r\n      onClick={() => { onClick(); }}\r\n    >\r\n      {condtion ? t(textTrue) : t(textFalse)}\r\n    </Button>\r\n  );\r\n};\r\nexport default ButtonToggle;\r\n","import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from 'mobx-react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\ninterface PropsSelectImageByTag {\r\n  onChange: (val: string) => void;\r\n}\r\nconst styleSelect = {\r\n  width: '150px',\r\n};\r\n\r\nconst SelectImageByTag: React.FC<PropsSelectImageByTag> = observer(({ onChange }) => {\r\n  const { t } = useTranslation();\r\n  return (\r\n    <div>\r\n      <Form.Group as={Col} controlId=\"exampleForm.SelectTag\">\r\n        {/* <Form.Label>\r\n          tags\r\n        </Form.Label> */}\r\n        <Form.Control\r\n          as=\"select\"\r\n          className=\"form-select form-select-sm\"\r\n          style={styleSelect}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => { onChange(e.target.value); }}\r\n        >\r\n          <option value=\"כללי\">{t('general')}</option>\r\n          <option value=\"הולכי רגל\">{t('pedestrian')}</option>\r\n          <option value=\"רוכבי אופניים\">{t('cyclist')}</option>\r\n          <option value=\"רוכבי אופנוע\">{t('motorcycle')}</option>\r\n          <option value=\"מכוניות\">{t('car')}</option>\r\n          <option value=\"אוטובוסים\">{t('bus')}</option>\r\n          <option value=\"ילדים\">{t('kids')}</option>\r\n        </Form.Control>\r\n      </Form.Group>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default SelectImageByTag;\r\n","import React, { useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from 'mobx-react';\r\nimport { toJS } from 'mobx';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ImageGallery from 'react-image-gallery';\r\nimport 'react-image-gallery/styles/css/image-gallery.css';\r\nimport ButtonToggle from '../atoms/ButtonToggle';\r\nimport SelectImageByTag from '../atoms/SelectImageByTag';\r\nimport { useStore } from '../../stores/storeConfig';\r\nimport SmallCard2 from '../atoms/SmallCard2';\r\n\r\ninterface Props {\r\n  type: string;\r\n}\r\n// const styleCard: React.CSSProperties = {\r\n//   borderRadius: '5px',\r\n//   padding: '5px',\r\n//   margin: '7px',\r\n//   width: '80%',\r\n// };\r\nconst styleCol: React.CSSProperties = {\r\n  display: 'flex',\r\n  justifyContent: 'center',\r\n};\r\n\r\nconst MyImageGallery: React.FC<Props> = observer(({ type }) => {\r\n  const { imageStore, uiStore } = useStore();\r\n  const {\r\n    getImages, setCurrImage, imageList, setCurrTag,\r\n  } = imageStore;\r\n  const { language } = uiStore;\r\n  const isRTL = (language !== 'en');\r\n  useEffect(() => {\r\n    getImages(type);\r\n  }, [getImages, type]);\r\n  const titleKey = `title${language}`;\r\n  const destkey = `text${language}`;\r\n  const arrayImagesProps = toJS(imageList);\r\n  const images = arrayImagesProps.map((x: any) => ({\r\n    original: x.filename,\r\n    thumbnail: x.filename,\r\n    originalTitle: x[titleKey],\r\n    description: x[destkey],\r\n  }));\r\n  const isGotImages = (images.length > 0);\r\n  const handleOnSlide = (currentIndex: number) => {\r\n    if (arrayImagesProps.length > 0) setCurrImage(arrayImagesProps[currentIndex]);\r\n    return true;\r\n  };\r\n  return (\r\n    <SmallCard2>\r\n      <Row >\r\n        <Col md={3} style={styleCol}>\r\n          <SelectImageByTag onChange={(val: string) => setCurrTag(val)} />\r\n        </Col>\r\n        <Col xs={12} md={6}>\r\n          {isGotImages && <ImageTitle />}\r\n        </Col>\r\n        <Col md={3} style={styleCol}>\r\n          {isGotImages && <ButtonToggleHideDescription />}\r\n        </Col>\r\n      </Row>\r\n      <hr />\r\n      {isGotImages && (\r\n        <ImageGallery\r\n          items={images}\r\n          isRTL={isRTL}\r\n          onSlide={(currentIndex: number) => handleOnSlide(currentIndex)}\r\n        />\r\n      )}\r\n      {!isGotImages && <ImageMsg />}\r\n    </SmallCard2>\r\n  );\r\n});\r\n\r\nconst styleButtonToggle = {\r\n  width: 'auto'\r\n};\r\nconst ButtonToggleHideDescription: React.FC<{}> = observer(() => {\r\n  const { imageStore } = useStore();\r\n  const { hideDescription, toggleHideDescription } = imageStore;\r\n  return (\r\n    <div style={styleButtonToggle}>\r\n      <ButtonToggle\r\n        condtion={hideDescription}\r\n        textTrue=\"show-description\"\r\n        textFalse=\"hide-description\"\r\n        onClick={toggleHideDescription}\r\n      />\r\n    </div>\r\n  );\r\n});\r\n\r\nconst styleTitle: React.CSSProperties = {\r\n  textAlign: 'center',\r\n  fontWeight: 700,\r\n  fontSize: 18,\r\n  margin: '10px',\r\n};\r\nconst ImageTitle: React.FC<{}> = observer(() => {\r\n  const { imageStore, uiStore } = useStore();\r\n  const { currImage } = imageStore;\r\n  const { language } = uiStore;\r\n  const titleKey = `title${language}`;\r\n  // @ts-ignore\r\n  const title: string = (currImage !== null) ? currImage[titleKey] : '';\r\n  return (\r\n    <div style={styleTitle}>{title}</div>\r\n  );\r\n});\r\n\r\nconst ImageMsg: React.FC<{}> = observer(() => {\r\n  const { t } = useTranslation();\r\n  const { imageStore } = useStore();\r\n  const { isLoading } = imageStore;\r\n  return (\r\n    <span>{(isLoading) ? `${t('Loading…')}` : `${t('not-found-images')}`}</span>\r\n  );\r\n});\r\n\r\nexport default MyImageGallery;\r\n"],"sourceRoot":""}