{"version":3,"file":"static/js/4.8d0d8643.chunk.js","mappings":"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","sources":["components/atoms/SelectGroupBy.tsx","components/atoms/SelectGroupBy2.tsx","components/groupTable/GroupByTable.tsx","components/groupTable/CardGroupTablesYears.tsx","components/groupTable/CardGroupTablesYears2.tsx","components/groupTable/CardGroupTable.tsx","components/groupTable/CardGroupTables2.tsx","components/groupTable/GroupByTablesPanel.tsx","../node_modules/react-bootstrap/esm/Row.js"],"sourcesContent":["import React, { ChangeEvent, useCallback } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { useStore } from '../../stores/storeConfig';\r\nimport GroupBy from '../../stores/filter/GroupBy';\r\nimport MySelect from './MySelect';\r\n\r\ninterface IProps {\r\n  id: string,\r\n  labelText?: string,\r\n}\r\nconst SelectGroupBy: React.FC<IProps> = observer(({ id, labelText = 'GroupBy' }) => {\r\n  const { filterStore } = useStore();\r\n  const { groupByDict, updateGroupby } = filterStore;\r\n\r\n  const onSelectChange = useCallback((event: ChangeEvent<HTMLSelectElement>) => {\r\n    updateGroupby(event.target.value);\r\n  }, [updateGroupby]);\r\n\r\n  const fixData = groupByDict.arrGroups;\r\n  const val = (groupByDict.groupBy as GroupBy).value;\r\n  return (\r\n    <MySelect\r\n      onChange={onSelectChange}\r\n      label={'GroupBy'}\r\n      data={fixData}\r\n      valProp=\"value\"\r\n      contentProp=\"text\"\r\n      value={val}\r\n      style= {{'display':'flex', 'height':'30px'}}\r\n      cssClass=\"form-select-m\"\r\n    />\r\n  );\r\n});\r\nexport default SelectGroupBy;\r\n","import React, { ChangeEvent, useCallback } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { useStore } from '../../stores/storeConfig';\r\nimport GroupBy2 from '../../stores/filter/GroupBy2';\r\nimport MySelect from './MySelect';\r\n\r\ninterface IProps { id: string }\r\n\r\nconst SelectGroupBy2: React.FC<IProps> = observer(({ id }) => {\r\n  const { t } = useTranslation();\r\n  const { filterStore } = useStore();\r\n  const { group2Dict, updateGroupBy2 } = filterStore;\r\n  const onSelectChange = useCallback((event: ChangeEvent<HTMLSelectElement>) => {\r\n    updateGroupBy2(event.target.value);\r\n  }, [updateGroupBy2]);\r\n\r\n  const fixData = group2Dict.arrGroups;\r\n  const val = (group2Dict.groupBy as GroupBy2).name;\r\n\r\n  return (\r\n    <MySelect\r\n      onChange={onSelectChange}\r\n      data={fixData}\r\n      // label={t('GroupBy')}\r\n      valProp=\"value\"\r\n      contentProp=\"text\"\r\n      value={val}\r\n    />\r\n  );\r\n});\r\nexport default SelectGroupBy2;\r\n","\r\nimport React, { FunctionComponent } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { t } from 'i18next';\r\nimport Table from \"react-bootstrap/Table\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport {\r\n  createColumnHelper,\r\n  flexRender,\r\n  getCoreRowModel,\r\n  useReactTable,\r\n} from '@tanstack/react-table'\r\n\r\ninterface IProps {\r\n    dataName?:string;\r\n    data: any[];\r\n    columns? :any[];\r\n  }\r\n\r\nconst foramtDataPrecision = (data: any[]) => {\r\n  const data2 = data.map((x) => {\r\n    if (typeof x.count === 'number' && !Number.isInteger(x.count)) {\r\n      return { _id : x._id, count: x.count.toFixed(1) };\r\n    }\r\n    return { _id : x._id, count: x.count};\r\n  });\r\n  return data2;\r\n};\r\n\r\ntype GroupTable ={\r\n  _id : string;\r\n  count: number;\r\n}\r\n\r\nconst columnHelper = createColumnHelper<GroupTable>();\r\n\r\nconst generateColumns = ( dataName: string, col2?: any[],) => {\r\n  if (!col2 || !col2.length) {\r\n    // Default column structure\r\n    return [\r\n      columnHelper.accessor('_id', {\r\n        cell: (info) => info.getValue(),\r\n        header: () => <span>{t(dataName)}</span>,\r\n      }),\r\n      columnHelper.accessor('count', {\r\n        cell: (info) => info.getValue(),\r\n        header: () => <span>{t('casualties')}</span>, \r\n      }),\r\n    ];\r\n  }\r\n  // Dynamic column structure with translation\r\n  return col2.map((col: any) =>\r\n    columnHelper.accessor(col.dataField, {\r\n      cell: (info) => info.getValue(),\r\n      header: () => <span>{t(col.text)}</span>,\r\n    })\r\n  );\r\n};\r\n\r\n// const GroupByTable:FunctionComponent<IProps> = ({ dataName = 'Year', columns, data }) => {\r\n//   // do format only grp1 and not grpBy2\r\n//   const data1 = (columns === undefined) ? foramtDataPrecision(data) : data;\r\n//   const { t } = useTranslation();\r\n//   // let reactColumns = 1;\r\n//   const reactColumns = (columns === undefined) ? [{\r\n//     dataField: '_id',\r\n//     text: t(dataName),\r\n//   }, {\r\n//     dataField: 'count',\r\n//     text: t('casualties'),\r\n//   }] : columns;\r\n//   if (data != null) {\r\n//     return (\r\n//       <div className=\"groupByTable\">\r\n//         <BootstrapTable keyField=\"_id\" data={data1} columns={reactColumns} headerClasses=\"table-header\" />\r\n//       </div>\r\n//     );\r\n//   }\r\n//   return null;\r\n// };\r\n\r\nconst GroupByTable:FunctionComponent<IProps> = ({ dataName = 'Year', columns: col2, data }) => {\r\n  // const [data, _setData] = React.useState(() => [...data2])\r\n  const columns = generateColumns(dataName, col2);\r\n  const table = useReactTable({\r\n    data,\r\n    columns,\r\n    getCoreRowModel: getCoreRowModel(),\r\n  })\r\n  \r\n  return (\r\n    <div className=\"p-2\">\r\n      <Table striped bordered hover>\r\n        <thead>\r\n          {table.getHeaderGroups().map(headerGroup => (\r\n            <tr key={headerGroup.id}>\r\n              {headerGroup.headers.map(header => (\r\n                <th key={header.id}>\r\n                  {header.isPlaceholder\r\n                    ? null\r\n                    : flexRender(\r\n                        header.column.columnDef.header,\r\n                        header.getContext()\r\n                      )}\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody>\r\n          {table.getRowModel().rows.map(row => (\r\n            <tr key={row.id}>\r\n              {row.getVisibleCells().map(cell => (\r\n                <td key={cell.id}>\r\n                  {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n                </td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n        <tfoot>\r\n          {table.getFooterGroups().map(footerGroup => (\r\n            <tr key={footerGroup.id}>\r\n              {footerGroup.headers.map(header => (\r\n                <th key={header.id}>\r\n                  {header.isPlaceholder\r\n                    ? null\r\n                    : flexRender(\r\n                        header.column.columnDef.footer,\r\n                        header.getContext()\r\n                      )}\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tfoot>\r\n      </Table>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default GroupByTable;\r\n","import React, { FC } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from 'mobx-react';\r\nimport { toJS } from 'mobx';\r\nimport { useStore } from '../../stores/storeConfig';\r\nimport GroupByTable from './GroupByTable';\r\nimport SmallCard2 from '../atoms/SmallCard2';\r\n\r\nconst CardGroupTablesYears: FC<{}> = observer(() => {\r\n    const { t } = useTranslation();\r\n    const { filterStore } = useStore();\r\n    const { dataByYears, casualtiesNames } = filterStore;\r\n    const reactData1 = toJS(dataByYears);\r\n    if (reactData1.length > 0) {\r\n      return (\r\n        <SmallCard2 header={`${t(casualtiesNames)} ${t('in-region')}, ${t('by-years')}`}>\r\n          <GroupByTable data={reactData1} />\r\n        </SmallCard2>\r\n      );\r\n    }\r\n    return null;\r\n  });\r\n  \r\n  export default CardGroupTablesYears;","import React, { FC } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from 'mobx-react';\r\nimport { toJS } from 'mobx';\r\nimport { useStore } from '../../stores/storeConfig';\r\nimport GroupByTable from './GroupByTable';\r\nimport SmallCard2 from '../atoms/SmallCard2';\r\n\r\nconst CardGroupTablesYears2: FC<{}> = observer(() => {\r\n    const { t } = useTranslation();\r\n    const { filterStore } = useStore();\r\n    const { dataFilterdByYears, casualtiesNames } = filterStore;\r\n    const reactData2 = toJS(dataFilterdByYears);\r\n    if (reactData2.length > 0) {\r\n      return (\r\n        <SmallCard2 header={`${t(casualtiesNames)} ${t('by-years')}`}>\r\n          <GroupByTable data={reactData2} />\r\n        </SmallCard2>\r\n      );\r\n    }\r\n    return null;\r\n  });\r\n  \r\n  export default CardGroupTablesYears2;\r\n  ","import React, { FC } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { toJS } from 'mobx';\r\nimport { useStore } from '../../stores/storeConfig';\r\nimport GroupByTable from './GroupByTable';\r\nimport SmallCard2 from '../atoms/SmallCard2';\r\nimport SelectGroupBy from '../atoms/SelectGroupBy';\r\n\r\nconst CardGroupTable: FC<{}> = observer(() => {\r\n    const divStyle = {\r\n      display: 'flex',\r\n      flexDirection: 'row',\r\n    } as React.CSSProperties;\r\n    const { filterStore } = useStore();\r\n    const { dataFilterd, groupByDict } = filterStore;\r\n    const reactData = toJS(dataFilterd);\r\n    \r\n    if (reactData.length > 0) {\r\n      return (\r\n        <SmallCard2 style={{marginBottom: '0.5rem'}}>\r\n          <div style={divStyle}>\r\n            <SelectGroupBy id=\"Tables.Main\" />\r\n          </div>\r\n          <hr />\r\n          <GroupByTable data={reactData} dataName={groupByDict.groupBy.text} />\r\n        </SmallCard2>\r\n      );\r\n    }\r\n    return null;\r\n  });\r\n  \r\n  export default CardGroupTable;","import React, {FC} from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from 'mobx-react';\r\nimport { toJS } from 'mobx';\r\nimport { useStore } from '../../stores/storeConfig';\r\nimport GroupBy2 from '../../stores/filter/GroupBy2';\r\nimport GroupByTable from './GroupByTable';\r\nimport SmallCard2 from '../atoms/SmallCard2';\r\nimport SelectGroupBy from '../atoms/SelectGroupBy';\r\nimport SelectGroupBy2 from '../atoms/SelectGroupBy2';\r\n\r\nconst CardGroupTables2: FC<{}> = observer(() => {\r\n    const divStyle = {\r\n      display: 'flex',\r\n      // flexWrap: 'wrap',\r\n    } as React.CSSProperties;\r\n    // const styleLable = {\r\n    //   fontWeight: 700,\r\n    //   lineHeight: '40px',\r\n    //   marginLeft: '15px',\r\n    //   // marginTop: '5px',\r\n    //   // marginRight: '20px',\r\n    // };\r\n    const { t } = useTranslation();\r\n    const { filterStore } = useStore();\r\n    const { groupByDict, group2Dict, dataGroupby2 } = filterStore;\r\n    const columnsGrp2 = (group2Dict.groupBy as GroupBy2).getColumns().map((x: any) => ({ dataField: x, text: t(x) }));\r\n    const reactDataGrp2 = toJS(dataGroupby2);\r\n    const show = (groupByDict.groupBy.text !== 'CityByPop');\r\n    if (reactDataGrp2.length > 0) {\r\n      return (\r\n        <>\r\n          { show\r\n            && (\r\n              <SmallCard2>\r\n                <div style={divStyle}>\r\n                  {/* <span style={styleLable}>\r\n                    {' '}\r\n                    {t('GroupBy')}\r\n                    :\r\n                  </span> */}\r\n                  <SelectGroupBy\r\n                    id=\"Tables.Grp2\"\r\n                    labelText=\"\"\r\n                  />\r\n                  &nbsp;\r\n                  <SelectGroupBy2 id=\"Tables\" />\r\n                </div>\r\n                <hr />\r\n                <GroupByTable\r\n                  data={reactDataGrp2}\r\n                  dataName={groupByDict.groupBy.text}\r\n                  columns={columnsGrp2}\r\n                />\r\n              </SmallCard2>\r\n            )}\r\n        </>\r\n      );\r\n    }\r\n    return null;\r\n  });\r\n  export default CardGroupTables2;","import React, {FC} from 'react';\r\nimport CardGroupTablesYears from './CardGroupTablesYears';\r\nimport CardGroupTablesYears2 from './CardGroupTablesYears2';\r\nimport CardGroupTable from './CardGroupTable';\r\nimport CardGroupTables2 from './CardGroupTables2';\r\nimport { Col, Row } from 'react-bootstrap';\r\n\r\ninterface IProps { }\r\nexport const GroupByTablesPanel: FC<IProps> = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <Row>\r\n        <Col md={4} >\r\n          <CardGroupTablesYears />\r\n        </Col>\r\n        <Col md={4}>\r\n          <CardGroupTablesYears2 />\r\n        </Col>\r\n        <Col md={4}>\r\n          <CardGroupTable />\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col md={12}>\r\n          <CardGroupTables2 />\r\n        </Col>\r\n      </Row>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default GroupByTablesPanel;\r\n","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useBootstrapBreakpoints, useBootstrapMinBreakpoint } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Row = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  const breakpoints = useBootstrapBreakpoints();\n  const minBreakpoint = useBootstrapMinBreakpoint();\n  const sizePrefix = `${decoratedBsPrefix}-cols`;\n  const classes = [];\n  breakpoints.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let cols;\n    if (propValue != null && typeof propValue === 'object') {\n      ({\n        cols\n      } = propValue);\n    } else {\n      cols = propValue;\n    }\n    const infix = brkPoint !== minBreakpoint ? `-${brkPoint}` : '';\n    if (cols != null) classes.push(`${sizePrefix}${infix}-${cols}`);\n  });\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, decoratedBsPrefix, ...classes)\n  });\n});\nRow.displayName = 'Row';\nexport default Row;"],"names":["observer","_ref","id","labelText","filterStore","useStore","groupByDict","updateGroupby","onSelectChange","useCallback","event","target","value","fixData","arrGroups","val","groupBy","_jsx","MySelect","onChange","label","data","valProp","contentProp","style","cssClass","t","useTranslation","group2Dict","updateGroupBy2","name","columnHelper","createColumnHelper","dataName","columns","col2","generateColumns","length","map","col","accessor","dataField","cell","info","getValue","header","children","text","table","useReactTable","getCoreRowModel","className","_jsxs","Table","striped","bordered","hover","getHeaderGroups","headerGroup","headers","isPlaceholder","flexRender","column","columnDef","getContext","getRowModel","rows","row","getVisibleCells","getFooterGroups","footerGroup","footer","dataByYears","casualtiesNames","reactData1","toJS","SmallCard2","GroupByTable","dataFilterdByYears","reactData2","divStyle","display","flexDirection","dataFilterd","reactData","marginBottom","SelectGroupBy","dataGroupby2","columnsGrp2","getColumns","x","reactDataGrp2","show","_Fragment","SelectGroupBy2","GroupByTablesPanel","React","Row","Col","md","CardGroupTablesYears","CardGroupTablesYears2","CardGroupTable","CardGroupTables2","ref","bsPrefix","as","Component","props","decoratedBsPrefix","useBootstrapPrefix","breakpoints","useBootstrapBreakpoints","minBreakpoint","useBootstrapMinBreakpoint","sizePrefix","classes","forEach","brkPoint","propValue","cols","infix","push","classNames","displayName"],"sourceRoot":""}