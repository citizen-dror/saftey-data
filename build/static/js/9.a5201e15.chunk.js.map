{"version":3,"sources":["components/atoms/SelectGroupBy.tsx","components/atoms/SelectGroupBy2.tsx","components/molecules/chart/ChartBar.tsx","components/molecules/chart/ConfigChart.tsx","assets/SvgIconSettings.tsx","components/organisms/GroupByGraphsPanel.tsx"],"names":["SelectGroupBy","observer","id","labelText","useTranslation","t","filterStore","useStore","groupByDict","updateGroupby","onSelectChange","useCallback","event","target","value","fixData","arrGroups","val","groupBy","onChange","label","data","valProp","contentProp","cssClass","SelectGroupBy2","group2Dict","updateGroupBy2","name","ChartBar","dataChart","metaData","chartType","dir","height","fill","undefined","labels","map","x","_id","vals","count","datasets","backgroundColor","length","defColor","getColorPallete","borderColor","borderWidth","hoverBorderColor","key","color","hoverBackgroundColor","row","align","options1","responsive","maintainAspectRatio","scales","yAxes","ticks","beginAtZero","min","plugins","datalabels","display","anchor","font","size","legend","options","offset","ConfigChart","uiStore","chartTypeList","updateChartType","showPercentageChart","updateShowPercentageChart","Form","Group","controlId","Control","as","Object","entries","Checkbox","group","checked","e","SvgIconSettings","props","width","xmlns","viewBox","d","React","memo","styles","divCharts","minWidth","GroupByGraphsPanel","injuriesCount","style","Row","Col","md","CardChartYears","CardChartByGroup1","CardChartGrpBy2","dataFilterdByYears","casualtiesNames","direction","reactData2","toJS","SmallCard2","styleType","header","divConfig","justifyContent","divChart","useState","showModel","setShowModal","dataFilterd","reactData","dataFormated","Number","isInteger","toFixed","chart","memoSettingsIcon","useMemos","Button","onClick","ConfigModal","title","showModal","setShow","metaDAta","getBars","reactDataGrp2","dataGroupby2","flexWrap"],"mappings":"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","file":"static/js/9.a5201e15.chunk.js","sourcesContent":["import React, { ChangeEvent, useCallback } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from 'mobx-react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { useStore } from '../../stores/storeConfig';\r\nimport GroupBy from '../../stores/GroupBy';\r\nimport MySelect from './MySelect';\r\n\r\ninterface IProps {\r\n  id: string,\r\n  labelText?: string,\r\n}\r\nconst SelectGroupBy: React.FC<IProps> = observer(({ id, labelText = 'GroupBy' }) => {\r\n  const { t } = useTranslation();\r\n  const { filterStore } = useStore();\r\n  const { groupByDict, updateGroupby } = filterStore;\r\n\r\n  const onSelectChange = useCallback((event: ChangeEvent<HTMLSelectElement>) => {\r\n    updateGroupby(event.target.value);\r\n  }, [updateGroupby]);\r\n\r\n  const fixData = groupByDict.arrGroups;\r\n  const val = (groupByDict.groupBy as GroupBy).value;\r\n  return (\r\n    <MySelect\r\n      onChange={onSelectChange}\r\n      label={'GroupBy'}\r\n      data={fixData}\r\n      valProp=\"value\"\r\n      contentProp=\"text\"\r\n      value={val}\r\n      cssClass=\"form-select-m\"\r\n    />\r\n  );\r\n});\r\nexport default SelectGroupBy;\r\n","import React, { ChangeEvent, useCallback } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { useStore } from '../../stores/storeConfig';\r\nimport GroupBy2 from '../../stores/GroupBy2';\r\nimport MySelect from './MySelect';\r\n\r\ninterface IProps { id: string }\r\n\r\nconst SelectGroupBy2: React.FC<IProps> = observer(({ id }) => {\r\n  const { t } = useTranslation();\r\n  const { filterStore } = useStore();\r\n  const { group2Dict, updateGroupBy2 } = filterStore;\r\n  const onSelectChange = useCallback((event: ChangeEvent<HTMLSelectElement>) => {\r\n    updateGroupBy2(event.target.value);\r\n  }, [updateGroupBy2]);\r\n\r\n  const fixData = group2Dict.arrGroups;\r\n  const val = (group2Dict.groupBy as GroupBy2).name;\r\n\r\n  return (\r\n    <MySelect\r\n      onChange={onSelectChange}\r\n      data={fixData}\r\n      // label={t('GroupBy')}\r\n      valProp=\"value\"\r\n      contentProp=\"text\"\r\n      value={val}\r\n    />\r\n  );\r\n});\r\nexport default SelectGroupBy2;\r\n","import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Bar, HorizontalBar, Pie } from 'react-chartjs-2';\r\nimport 'chartjs-plugin-datalabels';\r\n\r\ninterface IProps {\r\n  data: readonly any[];\r\n  metaData?: any[];\r\n  chartType?: string;\r\n  height?: number;\r\n  fill?: string;\r\n  dir: string;\r\n}\r\n\r\nconst getColorPallete = (chartType: string, length: number, defColor: string) => {\r\n  let res;\r\n  if (chartType === 'PieChart') {\r\n    if (length < 3)\r\n      res = ['#031E47', '#6791B2']\r\n    else if (length < 6)\r\n      res = ['#031E47', '#24446B', '#466B8F', '#6791B2', '#88B7D6']\r\n    else {\r\n      res = ['#031E47', '#19385F', '#2F5177', '#466B8F', '#5C84A6', '#729EBE', '#88B7D6',\r\n        '#07681F', '#2D7B2C', '#538E39', '#7AA146', '#A0B352', '#C6C65F', '#ECD96C',\r\n        '#540455', '#671E6A', '#7A377F', '#8D5194', '#A06BA9', '#B384BE', '#C69ED3'\r\n      ];\r\n    }\r\n  }\r\n  else {\r\n    res = defColor;\r\n  }\r\n  return res;\r\n};\r\n\r\nconst ChartBar: React.FC<IProps> = ({ data, metaData, chartType = 'BarChart', height = 60, dir, fill = '#8884d8', }: IProps) => {\r\n  const { t } = useTranslation();\r\n  let dataChart;\r\n  // if metaData == undefined - chart of 1 group\r\n  if (metaData == undefined) {\r\n    const labels = data.map((x) => x._id);\r\n    const vals = data.map((x) => x.count);\r\n    const label = t('casualties');\r\n    const backgroundColor = getColorPallete(chartType, data.length, fill);\r\n    dataChart = {\r\n      labels,\r\n      datasets: [\r\n        {\r\n          label,\r\n          backgroundColor: backgroundColor,\r\n          borderColor: 'rgba(255,255,255,0.7)',\r\n          borderWidth: 1,\r\n          // hoverBackgroundColor: 0.7,\r\n          hoverBorderColor: 'rgba(255,99,132,1)',\r\n          data: vals,\r\n        },\r\n      ],\r\n    };\r\n  }\r\n  else {\r\n    const labels = data.map((x) => x._id);\r\n    const datasets1 = metaData.map((x: any) => {\r\n      const name = t(x.key);\r\n      const fill = x.color;\r\n      const vals = data.map((row) => row[x.key]);\r\n      return {\r\n        label: name,\r\n        backgroundColor: fill,\r\n        hoverBackgroundColor: 'rgba(255,99,132,0.4)',\r\n        hoverBorderColor: 'rgba(255,99,132,1)',\r\n        data: vals,\r\n      };\r\n    });\r\n    dataChart = {\r\n      labels,\r\n      datasets: datasets1,\r\n    };\r\n  };\r\n  let align = (dir === 'rtl') ? '-40' : 'end';\r\n  const options1 = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    scales: {\r\n      yAxes: [{\r\n        ticks: {\r\n          beginAtZero: true,\r\n          min: 0,\r\n        },\r\n      }],\r\n    },\r\n    plugins: {\r\n      datalabels: {\r\n        display: true,\r\n        align: align,\r\n        anchor: \"end\",\r\n        font: { size: \"14\" }\r\n        \r\n      }\r\n    },\r\n    legend: {\r\n      display: true\r\n    }\r\n  };\r\n  if (chartType === 'BarChart') {\r\n    return (\r\n      <Bar\r\n        data={dataChart}\r\n        //height={height}\r\n        options={options1}\r\n      />\r\n    );\r\n  }\r\n  if (chartType === 'HorizontalBar') {\r\n    const offset = (dir === 'rtl') ? 20 : 4;\r\n    return (\r\n      <HorizontalBar\r\n        data={dataChart}\r\n        options={\r\n          {\r\n            responsive: true,\r\n            maintainAspectRatio: false,\r\n            plugins: {\r\n              datalabels: {\r\n                display: true,\r\n                anchor: \"end\",\r\n                align: 'end',\r\n                offset : offset,\r\n                font: { size: \"14\" }\r\n              }\r\n            }\r\n          }}\r\n      />\r\n    );\r\n  }\r\n  return (\r\n    <Pie\r\n      data={dataChart}\r\n      options={{\r\n        responsive: true,\r\n        plugins: {\r\n          datalabels: {\r\n            display: true,\r\n            color: 'white',\r\n            align: align\r\n          }\r\n        }\r\n      }}\r\n    />\r\n  );\r\n};\r\nexport default ChartBar;\r\n","import React, { ChangeEvent, useCallback } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from 'mobx-react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Checkbox from '../../atoms/Checkbox';\r\nimport { useStore } from '../../../stores/storeConfig';\r\n\r\ninterface IProps { }\r\nconst ConfigChart: React.FC<IProps> = observer(() => {\r\n  const { t } = useTranslation();\r\n  const { uiStore } = useStore();\r\n  const {\r\n    chartType, chartTypeList, updateChartType, showPercentageChart, updateShowPercentageChart,\r\n  } = uiStore;\r\n  const onSelectChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\r\n    updateChartType(event.target.value);\r\n  }, [updateChartType]);\r\n  return (\r\n    <div>\r\n      <Form.Group controlId=\"ConfigFile.SelectChartType\">\r\n        {t('ChartType')}\r\n        <Form.Control\r\n          as=\"select\"\r\n          value={chartType}\r\n          onChange={onSelectChange}\r\n        >\r\n          {Object.entries(chartTypeList)\r\n            .map(([key, x]: any[]) => (<option value={x} key={key}>{t(x)}</option>))}\r\n        </Form.Control>\r\n      </Form.Group>\r\n      <Form.Group controlId=\"ConfigFile.ControlShowPercentageChart\">\r\n        <Checkbox\r\n          key={2}\r\n          label=\"PercentageChart\"\r\n          group=\"ChartConfig\"\r\n          id={2}\r\n          checked={showPercentageChart}\r\n          onChange={(e: ChangeEvent<HTMLInputElement>) => {\r\n            updateShowPercentageChart(e.target.checked);\r\n          }}\r\n        />\r\n      </Form.Group>\r\n    </div>\r\n  );\r\n});\r\nexport default ConfigChart;\r\n","import React from \"react\"\r\n\r\nfunction SvgIconSettings(props: React.SVGProps<SVGSVGElement>) {\r\n  const color = (props.color) ? props.color : 'blue';\r\n  const height = (props.height) ? props.height : 24;\r\n  const width = (props.width) ? props.width : 24;\r\n  return (\r\n    <svg\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      height={height}\r\n      viewBox=\"0 0 24 24\"\r\n      width={width}\r\n      {...props}\r\n    >\r\n      <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\r\n      <path d=\"M19.14 12.94c.04-.3.06-.61.06-.94 0-.32-.02-.64-.07-.94l2.03-1.58a.49.49 0 00.12-.61l-1.92-3.32a.488.488 0 00-.59-.22l-2.39.96c-.5-.38-1.03-.7-1.62-.94l-.36-2.54a.484.484 0 00-.48-.41h-3.84c-.24 0-.43.17-.47.41l-.36 2.54c-.59.24-1.13.57-1.62.94l-2.39-.96c-.22-.08-.47 0-.59.22L2.74 8.87c-.12.21-.08.47.12.61l2.03 1.58c-.05.3-.09.63-.09.94s.02.64.07.94l-2.03 1.58a.49.49 0 00-.12.61l1.92 3.32c.12.22.37.29.59.22l2.39-.96c.5.38 1.03.7 1.62.94l.36 2.54c.05.24.24.41.48.41h3.84c.24 0 .44-.17.47-.41l.36-2.54c.59-.24 1.13-.56 1.62-.94l2.39.96c.22.08.47 0 .59-.22l1.92-3.32c.12-.22.07-.47-.12-.61l-2.01-1.58zM12 15.6c-1.98 0-3.6-1.62-3.6-3.6s1.62-3.6 3.6-3.6 3.6 1.62 3.6 3.6-1.62 3.6-3.6 3.6z\"\r\n        fill={color} />\r\n    </svg>\r\n  )\r\n}\r\n\r\nexport default React.memo(SvgIconSettings);","import React, { useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from 'mobx-react';\r\nimport { toJS } from 'mobx';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { useStore } from '../../stores/storeConfig';\r\nimport GroupBy2 from '../../stores/GroupBy2';\r\nimport SelectGroupBy from '../atoms/SelectGroupBy';\r\nimport SelectGroupBy2 from '../atoms/SelectGroupBy2';\r\nimport ChartBar from '../molecules/chart/ChartBar';\r\nimport ConfigModal from './ConfigModal';\r\nimport ConfigChart from '../molecules/chart/ConfigChart';\r\nimport { useMemos } from '../../hooks/myUseMemo';\r\nimport SvgIconSettings from '../../assets/SvgIconSettings';\r\nimport SmallCard2 from '../atoms/SmallCard2';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\ninterface IProps { }\r\n// const getSize = (width: number) => {\r\n//    let size: number = 500;\r\n//    if (width <= 350) size = 300;\r\n//    else if (width <= 770) size = width * 0.8;\r\n//    else if (width <= 1200) size = (width - 300) * 0.9;\r\n//    else size = 1000;\r\n//    return size;\r\n// };\r\n\r\nconst styles = {\r\n   divCharts: {\r\n     width:0,\r\n     minWidth: '100%',\r\n   },\r\n };\r\n\r\nexport const GroupByGraphsPanel: React.FC<IProps> = observer(() => {\r\n   const { filterStore } = useStore();\r\n   const { injuriesCount } = filterStore;\r\n\r\n   if (injuriesCount > 0) {\r\n      return (\r\n         <div style={styles.divCharts}>\r\n            <Row>\r\n               <Col md={4}>\r\n                  <CardChartYears />\r\n               </Col>\r\n               <Col md={8} >\r\n                  <CardChartByGroup1 />\r\n               </Col>\r\n            </Row>\r\n            <Row>\r\n               <Col md={12}>\r\n                  <CardChartGrpBy2 />\r\n               </Col>\r\n            </Row>\r\n         </div>\r\n      );\r\n   }\r\n   return null;\r\n});\r\n\r\nconst foramtDataPrecision = (data: any[]) => {\r\n   const data2 = data.map((x) => {\r\n      if (typeof x.count === 'number' && !Number.isInteger(x.count)) {\r\n         return { _id: x._id, count: x.count.toFixed(1) };\r\n      }\r\n      return { _id: x._id, count: x.count };\r\n   });\r\n   return data2;\r\n};\r\n\r\nconst CardChartYears: React.FC<IProps> = observer(() => {\r\n   const { t } = useTranslation();\r\n   const { filterStore, uiStore } = useStore();\r\n   const { dataFilterdByYears, casualtiesNames } = filterStore;\r\n   const { direction } = uiStore;\r\n   const reactData2 = toJS(dataFilterdByYears);\r\n   const styles = {\r\n      divChart: {\r\n         width: '100%',\r\n         height: '60vh',\r\n      },\r\n   };\r\n   return (\r\n      <SmallCard2 styleType={2} header={`${t(casualtiesNames)} ${t('by-years')}`}>\r\n         <div style={styles.divChart}>\r\n            <ChartBar data={reactData2} fill=\"#FE9772\" dir={direction} />\r\n         </div>\r\n      </SmallCard2>\r\n   );\r\n});\r\n\r\nconst CardChartByGroup1: React.FC<IProps> = observer(() => {\r\n   const styles = {\r\n      divConfig: {\r\n         display: 'flex',\r\n         justifyContent: 'space-between',\r\n      },\r\n      divChart: {\r\n         width: '100%',\r\n         height: '60vh',\r\n      },\r\n   };\r\n   // const { t } = useTranslation();\r\n   const [showModel, setShowModal] = useState(false);\r\n   const { filterStore, uiStore } = useStore();\r\n   const { dataFilterd } = filterStore;\r\n   const reactData = toJS(dataFilterd);\r\n   const dataFormated = foramtDataPrecision(reactData);\r\n   const { chartType, direction } = uiStore;\r\n   const chart = <ChartBar\r\n      data={dataFormated}\r\n      fill=\"#8884d8\"\r\n      chartType={chartType}\r\n      height={150}\r\n      dir={direction}\r\n   />;\r\n   const memoSettingsIcon = useMemos([],\r\n      <SvgIconSettings color={'var(--onprimary-color)'} />\r\n   );\r\n   // const memoSettingsIcon = <SvgIconSettings color={'var(--onprimary-color)'} />;   \r\n   return (\r\n      <SmallCard2>\r\n         <div style={styles.divConfig}>\r\n            <SelectGroupBy id=\"Graphs.Main\" />\r\n            <Button onClick={() => { setShowModal(!showModel); }}>\r\n               {memoSettingsIcon}\r\n            </Button>\r\n         </div>\r\n         <ConfigModal title=\"Chart Options\" showModal={showModel} setShow={setShowModal}>\r\n            <ConfigChart />\r\n         </ConfigModal>\r\n         <div >\r\n            <hr />\r\n            <div style={styles.divChart} >\r\n               {chart}\r\n            </div>\r\n         </div>\r\n      </SmallCard2>\r\n   );\r\n});\r\n\r\nconst CardChartGrpBy2: React.FC<IProps> = observer(() => {\r\n   const styles = {\r\n      styleLable: {\r\n         fontWeight: 700,\r\n         marginTop: '5px',\r\n         marginLeft: '20px',\r\n         marginRight: '20px',\r\n      },\r\n      divChart: {\r\n         width: '100%',\r\n         height: '60vh',\r\n      },\r\n   }\r\n   const divConstolsRow = {\r\n      display: 'flex',\r\n      flexWrap: 'wrap',\r\n   } as React.CSSProperties;\r\n   const { t } = useTranslation();\r\n   const { filterStore, uiStore } = useStore();\r\n   const { group2Dict } = filterStore;\r\n   const { groupBy } = group2Dict;\r\n   const { chartType, direction } = uiStore;\r\n   const metaDAta = (groupBy as GroupBy2).getBars();\r\n   const reactDataGrp2 = toJS(filterStore.dataGroupby2);\r\n   const show = true;\r\n   return (\r\n      <div>\r\n         {show\r\n            && (\r\n               <SmallCard2>\r\n                  <div style={divConstolsRow}>\r\n                     {/* <span style={styles.styleLable}>\r\n                        {' '}\r\n                        {t('GroupBy')}\r\n                        {' '}\r\n                  :\r\n                </span> */}\r\n                     <SelectGroupBy id=\"Graphs.Grp2\" labelText=\"\" />\r\n                     {' '}\r\n                &nbsp;\r\n                <SelectGroupBy2 id=\"Graphs\" />\r\n                     {/* <RangeSlider id=\"Graphs\" label=\"resize\" value={80} onChange={onSizeSliderChange}/> */}\r\n                  </div>\r\n                  <hr />\r\n                  <div style={styles.divChart}>\r\n                     <ChartBar data={reactDataGrp2} metaData={metaDAta} chartType={chartType} dir={direction} />\r\n                  </div>\r\n               </SmallCard2>\r\n            )}\r\n      </div>\r\n   );\r\n});\r\n\r\nexport default GroupByGraphsPanel;\r\n"],"sourceRoot":""}