{"version":3,"sources":["components/atoms/SmallCard.tsx","components/atoms/SelectGroupBy.tsx","components/atoms/SelectGroupBy2.tsx","components/molecules/MyBarChart.tsx","components/organisms/GroupByGraphsPanel.tsx"],"names":["SmallCard","title","styleType","width","children","styleCard","borderRadius","padding","margin","aHeder","Header","style","SelectGroupBy","observer","id","labelText","t","useTranslation","filterStore","useStore","groupByDict","groupBy","updateGroupby","lable","Label","className","onSelectChange","useCallback","event","target","value","Group","controlId","Control","as","text","onChange","Object","entries","map","key","x","SelectGroupBy2","group2Dict","groupBy2","updateGroupBy2","MyBarChart","data","bars","height","fill","legendType","colName","undefined","dataKey","name","aName","color","maxLabelLangth","reduce","maxval","currentValue","_id","length","xAxis","textAnchor","interval","angle","tick","fontSize","legend","layout","verticalAlign","align","direction","top","right","left","bottom","strokeDasharray","memo","getSize","GroupByGraphsPanel","dataByYears","toJS","marginLeft","marginRight","marginTop","CardChartYears","CardChartByGroup1","CardChartGrpBy2","useState","window","innerWidth","graphSize","setGraphSize","React","useEffect","handleResize","size","addEventListener","removeEventListener","graph1Size","Math","min","dataFilterdByYears","reactData2","graph2Size","dataFilterd","reactData3","barsGrp2","getBars","reactDataGrp2","dataGroupby2","display","flexWrap","fontWeight"],"mappings":"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","file":"static/js/7.fed2ceba.chunk.js","sourcesContent":["import React from 'react'\r\nimport Card from 'react-bootstrap/Card';\r\n\r\ninterface IProps {\r\n    title?: string,\r\n    styleType?: number\r\n    width?: number\r\n}\r\nexport const SmallCard: React.FC<IProps> = ({ title, styleType = 0, width = 0, children }) => {\r\n    const styleWidth: any[] = [\r\n        '15rem', '20rem', '25rem', '40rem'\r\n    ];\r\n    let styleCard: any =\r\n    {\r\n        borderRadius: '5px',\r\n        padding: '5px',\r\n        margin: '7px'\r\n    };\r\n    let aHeder = title ? <Card.Header>{title}</Card.Header> : \"\";\r\n    if (width > 0)\r\n        styleCard.width = width\r\n    else\r\n        styleCard.width = styleWidth[styleType]\r\n    return (\r\n        <Card style={styleCard}>\r\n            {aHeder}\r\n            {children}\r\n        </Card>\r\n    )\r\n}","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from \"mobx-react\"\r\nimport Form from 'react-bootstrap/Form';\r\nimport { useStore } from '../../stores/storeConfig'\r\n\r\ninterface IProps {\r\n    id: string,\r\n    labelText?: string,\r\n}\r\nexport const SelectGroupBy: React.FC<IProps> = observer(({ id, labelText = 'GroupBy' }) => {\r\n    const { t } = useTranslation();\r\n    const { filterStore } = useStore();\r\n    const { groupByDict, groupBy, updateGroupby } = filterStore;\r\n    const lable = (labelText !== '') ? <Form.Label className=\"filterLable\"> {t(labelText)}:</Form.Label> : null;\r\n    const onSelectChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\r\n        updateGroupby(event.target.value)\r\n    }, [updateGroupby]);\r\n\r\n    return (\r\n        <Form className=\"form-inline\">\r\n            <Form.Group controlId={`GrupForm.${id}.SelectGroupBy`}>\r\n                {lable}\r\n                <Form.Control as=\"select\" value={groupBy.text}\r\n                    onChange={onSelectChange}\r\n                >\r\n                    {Object.entries(groupByDict).map(([key, x]: any[]) => {\r\n                        return (<option value={x.text} key={key}>{t(x.text)}</option>)\r\n                    })}\r\n                </Form.Control>\r\n            </Form.Group>\r\n        </Form>\r\n    )\r\n})","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from \"mobx-react\"\r\nimport Form from 'react-bootstrap/Form';\r\nimport { useStore } from '../../stores/storeConfig'\r\n\r\n\r\ninterface IProps { id: string }\r\n\r\nexport const SelectGroupBy2: React.FC<IProps> = observer(({ id }) => {\r\n    const { t } = useTranslation();\r\n    const { filterStore } = useStore();\r\n    const { group2Dict, groupBy2, updateGroupBy2 } = filterStore;\r\n    const onSelectChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\r\n        updateGroupBy2(event.target.value)\r\n    }, [updateGroupBy2]);\r\n    return (\r\n        <Form className=\"form-inline\">\r\n            <Form.Group controlId={`GrupForm.${id}.SelectGroupBy2`}>\r\n                {/* <Form.Label className=\"filterLable\"> {t('GroupBy')}:</Form.Label> */}\r\n                <Form.Control as=\"select\" value={groupBy2.text}\r\n                    onChange={onSelectChange}\r\n                >\r\n                    {Object.entries(group2Dict).map(([key, x]: any[]) => {\r\n                        return (<option value={x.text} key={key}>{t(x.text)}</option>)\r\n                    })}\r\n                </Form.Control>\r\n            </Form.Group>\r\n        </Form>\r\n    )\r\n})","import React, {memo} from 'react';\r\nimport {\r\n  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\r\n} from 'recharts';\r\nimport { observer } from \"mobx-react\"\r\nimport { useTranslation } from 'react-i18next';\r\n\r\n// const data = [\r\n//   { name: 'Page A', uv: 4000, pv: 2400, amt: 2400,},\r\n//   { name: 'Page B', uv: 3000, pv: 1398, amt: 2210,},\r\n//   { name: 'Page C', uv: 2000, pv: 9800, amt: 2290,},\r\n// ];\r\n\r\ninterface IProps {\r\n  data :readonly any[]\r\n  bars ?: any \r\n  width? : number\r\n  height? : number,\r\n  fill? : string, \r\n  legendType? : string\r\n}\r\n\r\nconst MyBarChart:React.FC<IProps>=  observer(({data,bars, width=390, height=350, fill=\"#8884d8\",legendType=\"null\"}) => {\r\n  const { t } = useTranslation();\r\n  let colName = t('Casualties');\r\n  if (bars === undefined){\r\n    bars = <Bar dataKey=\"count\" name={colName} fill={fill} />\r\n  }\r\n  else\r\n  {\r\n    bars = bars.map((x:any)=>{\r\n      let aName = t(x.key)\r\n      return(<Bar key={`bar-${x.key}`} dataKey={x.key} name={aName} fill={x.color}/>)\r\n    })\r\n  }\r\n  const maxLabelLangth = data.reduce(function(maxval,currentValue){\r\n    return (currentValue._id !== null && currentValue._id.length > maxval)? currentValue._id.length:maxval;\r\n  },0);\r\n  const xAxis = (data.length >5 || maxLabelLangth>9)? <XAxis dataKey=\"_id\" textAnchor=\"end\" interval={0} angle={-30} tick={{fontSize: 12}} />: <XAxis dataKey=\"_id\"/>\r\n  const legend = (legendType === \"null\" || width < 500) ? null :  <Legend layout=\"horizontal\" verticalAlign=\"top\" align=\"center\"/>\r\n  return (\r\n    <div style={{direction: \"ltr\"}}>\r\n    <BarChart\r\n      width={width}\r\n      height={height}\r\n      data={data}\r\n      margin={{\r\n        top: 5, right: 0, left: 0, bottom: 75,\r\n      }}\r\n    >\r\n      <CartesianGrid strokeDasharray=\"3 3\" />\r\n      {xAxis}\r\n      <YAxis />\r\n      <Tooltip />\r\n      {legend}\r\n      {bars}\r\n      {/* <Bar dataKey=\"uv\" fill=\"#82ca9d\" /> */}\r\n    </BarChart>\r\n    </div>\r\n  );\r\n})\r\n\r\nexport default memo(MyBarChart)\r\n","import React, { useState } from 'react'\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from \"mobx-react\"\r\nimport { toJS } from 'mobx'\r\nimport { useStore } from '../../stores/storeConfig'\r\nimport { SmallCard } from '../atoms/SmallCard'\r\nimport { SelectGroupBy } from '../atoms/SelectGroupBy'\r\nimport { SelectGroupBy2 } from '../atoms/SelectGroupBy2'\r\n// import { RangeSlider } from '../atoms/RangeSlider'\r\nimport MyBarChart from '../molecules/MyBarChart'\r\n\r\ninterface IProps { }\r\nconst getSize = (width: number) => {\r\n    let size: number = 500;\r\n    if (width <= 350)\r\n        size = 300;\r\n    else if (width <= 760)\r\n        size = width * 0.85;\r\n    else if (width <= 1500)\r\n        size = width * 0.75;\r\n    else\r\n        size = 1200;\r\n    return size;\r\n}\r\n\r\nexport const GroupByGraphsPanel: React.FC<IProps> = observer(() => {\r\n    const style = {\r\n        marginLeft: \"0\",\r\n        marginRight: \"0\",\r\n        marginTop: \"20px\"\r\n    };\r\n    const { filterStore } = useStore();\r\n    const { dataByYears } = filterStore;\r\n    const reactData1 = toJS(dataByYears)\r\n    if (reactData1.length > 0) {\r\n        return (\r\n            <div className=\"row\" style={style}>\r\n                <CardChartYears />\r\n                <CardChartByGroup1 />\r\n                <CardChartGrpBy2 />\r\n            </div>\r\n        )\r\n    }\r\n    else return null;\r\n})\r\n\r\nconst CardChartYears: React.FC<IProps> = observer(() => {\r\n    const { t } = useTranslation();\r\n    const [graphSize, setGraphSize] = useState(getSize(window.innerWidth));\r\n    React.useEffect(() => {\r\n        function handleResize() {\r\n            const size = getSize(window.innerWidth)\r\n            setGraphSize(size)\r\n        }\r\n        window.addEventListener('resize', handleResize)\r\n        return (() => { window.removeEventListener('resize', handleResize) })\r\n    })\r\n    let graph1Size = Math.min(380, graphSize)\r\n    const { filterStore } = useStore();\r\n    const { dataFilterdByYears } = filterStore;\r\n    const reactData2 = toJS(dataFilterdByYears)\r\n    return (\r\n        <SmallCard styleType={2} title={t('CasualtiesByFilter')}>\r\n            <MyBarChart data={reactData2} width={graph1Size} fill=\"#FE9772\" />\r\n        </SmallCard>\r\n    )\r\n})\r\n\r\nconst CardChartByGroup1: React.FC<IProps> = observer(() => {\r\n    const [graphSize, setGraphSize] = useState(getSize(window.innerWidth));\r\n    let graph2Size = Math.min(600, graphSize)\r\n    React.useEffect(() => {\r\n        function handleResize() {\r\n            const size = getSize(window.innerWidth)\r\n            setGraphSize(size)\r\n        }\r\n        window.addEventListener('resize', handleResize)\r\n        return (() => { window.removeEventListener('resize', handleResize) })\r\n    })\r\n    const { filterStore } = useStore();\r\n    const { dataFilterd } = filterStore;\r\n    let reactData3 = toJS(dataFilterd)\r\n    return (\r\n        <SmallCard styleType={3}>\r\n            <SelectGroupBy id=\"Graphs.Main\" />\r\n            <MyBarChart data={reactData3} width={graph2Size} height={graph2Size * 0.65}></MyBarChart>\r\n        </SmallCard>\r\n    )\r\n})\r\n\r\nconst CardChartGrpBy2: React.FC<IProps> = observer(() => {\r\n    const styleLable = {\r\n        fontWeight: 700,\r\n        marginTop: \"5px\",\r\n        marginLeft: \"20px\",\r\n        marginRight: \"20px\"\r\n    };\r\n    const divConstolsRow = {\r\n        display: \"flex\",\r\n        flexWrap: \"wrap\"\r\n    } as React.CSSProperties;\r\n    const { t } = useTranslation();\r\n    const [graphSize, setGraphSize] = useState(getSize(window.innerWidth));\r\n    React.useEffect(() => {\r\n        function handleResize() {\r\n            const size = getSize(window.innerWidth)\r\n            setGraphSize(size)\r\n        }\r\n        window.addEventListener('resize', handleResize)\r\n        return (() => { window.removeEventListener('resize', handleResize) })\r\n    })\r\n    const { filterStore } = useStore();\r\n    const { groupBy2 } = filterStore;\r\n    const barsGrp2 = groupBy2.getBars();\r\n    const reactDataGrp2 = toJS(filterStore.dataGroupby2)\r\n    return (\r\n        <SmallCard width={graphSize + 150}>\r\n            <div style={divConstolsRow}>\r\n                <span style={styleLable}> {t('GroupBy')}:</span>\r\n                <SelectGroupBy id=\"Graphs.Grp2\" labelText='' />\r\n                <SelectGroupBy2 id=\"Graphs\" />\r\n                {/* <RangeSlider id=\"Graphs\" label=\"resize\" value={80} onChange={onSizeSliderChange}/> */}\r\n            </div>\r\n            <MyBarChart data={reactDataGrp2} bars={barsGrp2} width={graphSize} height={graphSize * 0.62} legendType=\"top\"></MyBarChart>\r\n        </SmallCard>\r\n    )\r\n})\r\nexport default GroupByGraphsPanel\r\n    // const onSizeSliderChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    //     let size:number = parseInt(event.target.value)\r\n    //     switch(true) {\r\n    //         case (size <= 25):\r\n    //             size= 300;\r\n    //             break;\r\n    //         case (size <= 50):\r\n    //             size= 500;\r\n    //           break;\r\n    //         case (size <= 75):\r\n    //             size= 800;\r\n    //           break;\r\n    //         case (size <= 100):\r\n    //             size= 1200;\r\n    //           break;\r\n    //         default:\r\n    //             size= 500;\r\n    //       }\r\n    //     setGraphSize(size) \r\n    //   };\r\n\r\n// function debounce(fn:()=>void, ms:any ) {\r\n//     let timer :any\r\n//     return _ => {\r\n//       clearTimeout(timer)\r\n//       timer = setTimeout(_ => {\r\n//         timer = null\r\n//         fn.apply(this , arguments)\r\n//       }, ms)\r\n//     };\r\n//   }"],"sourceRoot":""}