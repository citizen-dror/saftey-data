{"version":3,"sources":["components/atoms/SmallCard.tsx","components/atoms/SelectGroupBy.tsx","components/atoms/SelectGroupBy2.tsx","components/molecules/MyBarChart.tsx","components/molecules/MyPieChart.tsx","components/molecules/MyTreeMap.tsx","components/molecules/ConfigChart.tsx","components/organisms/GroupByGraphsPanel.tsx"],"names":["SmallCard","title","styleType","width","children","styleCard","borderRadius","padding","margin","aHeder","Header","style","SelectGroupBy","observer","id","labelText","t","useTranslation","filterStore","useStore","groupByDict","groupBy","updateGroupby","lable","Label","className","onSelectChange","useCallback","event","target","value","Group","controlId","Control","as","text","onChange","Object","entries","map","key","x","SelectGroupBy2","group2Dict","groupBy2","updateGroupBy2","MyBarChart","data","barsData","height","fill","legendType","colName","maxLabelLangth","reduce","maxval","currentValue","_id","length","isManyBarsForXAxis","isManyBarsForLables","bars","undefined","dataKey","name","position","formatter","label","Number","isInteger","toFixed","aName","labelList","color","xAxis","textAnchor","interval","angle","tick","fontSize","bottomMargin","legend","layout","verticalAlign","align","direction","top","right","left","bottom","strokeDasharray","memo","RADIAN","Math","PI","renderCustomizedLabel","cx","cy","midAngle","innerRadius","outerRadius","percent","fcx","fcy","inR","outR","midA","p","radius","cos","y","sin","dominantBaseline","MyPieChart","showPercentageChart","uiStore","mylabel","nameKey","isAnimationActive","labelLine","MyTreeMap","data2","count","ratio","stroke","ConfigChart","chartType","chartTypeList","updateChartType","updateShowPercentageChart","Form","Checkbox","group","checked","e","getSize","GroupByGraphsPanel","dataByYears","toJS","marginLeft","marginRight","marginTop","CardChartYears","CardChartByGroup1","CardChartGrpBy2","useState","window","innerWidth","graphSize","setGraphSize","React","useEffect","handleResize","size","addEventListener","removeEventListener","graph1Size","min","dataFilterdByYears","casualtiesNames","reactData2","styles","divStyle","display","justifyContent","iconStyle","paddingTop","paddingBottom","showModel","setShowModal","graph2Size","dataFilterd","reactData3","chart","Button","onClick","src","gearlogo","alt","ConfigFilterModal","showModal","setShow","barsGrp2","getBars","reactDataGrp2","dataGroupby2","show","flexWrap","fontWeight"],"mappings":"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","file":"static/js/9.d5d4ea87.chunk.js","sourcesContent":["import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\ninterface IProps {\r\n    title?: string,\r\n    styleType?: number\r\n    width?: number\r\n}\r\nconst SmallCard: React.FC<IProps> = ({\r\n  title, styleType = 0, width = 0, children,\r\n}) => {\r\n  const styleWidth: any[] = [\r\n    '15rem', '20rem', '25rem', '40rem',\r\n  ];\r\n  const styleCard: any = {\r\n    borderRadius: '5px',\r\n    padding: '5px',\r\n    margin: '7px',\r\n  };\r\n  const aHeder = title ? <Card.Header>{title}</Card.Header> : '';\r\n  if (width > 0) styleCard.width = width;\r\n  else styleCard.width = styleWidth[styleType];\r\n  return (\r\n    <Card style={styleCard}>\r\n      {aHeder}\r\n      {children}\r\n    </Card>\r\n  );\r\n};\r\nexport default SmallCard;\r\n","import React, { ChangeEvent, useCallback } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from 'mobx-react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { useStore } from '../../stores/storeConfig';\r\n\r\ninterface IProps {\r\n    id: string,\r\n    labelText?: string,\r\n}\r\nconst SelectGroupBy: React.FC<IProps> = observer(({ id, labelText = 'GroupBy' }) => {\r\n  const { t } = useTranslation();\r\n  const { filterStore } = useStore();\r\n  const { groupByDict, groupBy, updateGroupby } = filterStore;\r\n  const lable = (labelText !== '') ? (\r\n    <Form.Label className=\"filterLable\">\r\n      {' '}\r\n      {t(labelText)}\r\n:\r\n    </Form.Label>\r\n  ) : null;\r\n  const onSelectChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\r\n    updateGroupby(event.target.value);\r\n  }, [updateGroupby]);\r\n\r\n  return (\r\n    <Form className=\"form-inline\">\r\n      <Form.Group controlId={`GrupForm.${id}.SelectGroupBy`}>\r\n        {lable}\r\n        <Form.Control\r\n          as=\"select\"\r\n          value={groupBy.text}\r\n          onChange={onSelectChange}\r\n        >\r\n          {Object.entries(groupByDict).map(([key, x]: any[]) => (<option value={x.text} key={key}>{t(x.text)}</option>))}\r\n        </Form.Control>\r\n      </Form.Group>\r\n    </Form>\r\n  );\r\n});\r\nexport default SelectGroupBy;\r\n","import React, { ChangeEvent, useCallback } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from 'mobx-react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { useStore } from '../../stores/storeConfig';\r\n\r\n\r\ninterface IProps { id: string }\r\n\r\nconst SelectGroupBy2: React.FC<IProps> = observer(({ id }) => {\r\n  const { t } = useTranslation();\r\n  const { filterStore } = useStore();\r\n  const { group2Dict, groupBy2, updateGroupBy2 } = filterStore;\r\n  const onSelectChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\r\n    updateGroupBy2(event.target.value);\r\n  }, [updateGroupBy2]);\r\n  return (\r\n    <Form className=\"form-inline\">\r\n      <Form.Group controlId={`GrupForm.${id}.SelectGroupBy2`}>\r\n        {/* <Form.Label className=\"filterLable\"> {t('GroupBy')}:</Form.Label> */}\r\n        <Form.Control\r\n          as=\"select\"\r\n          value={groupBy2.text}\r\n          onChange={onSelectChange}\r\n        >\r\n          {Object.entries(group2Dict).map(([key, x]: any[]) => (<option value={x.text} key={key}>{t(x.text)}</option>))}\r\n        </Form.Control>\r\n      </Form.Group>\r\n    </Form>\r\n  );\r\n});\r\nexport default SelectGroupBy2;\r\n","import React, { memo } from 'react';\r\nimport {\r\n  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, LabelList,\r\n} from 'recharts';\r\nimport { observer } from 'mobx-react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\n// const data = [\r\n//   { name: 'Page A', uv: 4000, pv: 2400, amt: 2400,},\r\n//   { name: 'Page B', uv: 3000, pv: 1398, amt: 2210,},\r\n//   { name: 'Page C', uv: 2000, pv: 9800, amt: 2290,},\r\n// ];\r\n\r\ninterface IProps {\r\n  data :readonly any[]\r\n  barsData ?: any\r\n  width? : number\r\n  height? : number,\r\n  fill? : string,\r\n  legendType? : string\r\n}\r\n\r\nconst MyBarChart:React.FC<IProps> = observer(({\r\n  data, barsData, width = 390, height = 350, fill = '#8884d8', legendType = 'null',\r\n}) => {\r\n  const { t } = useTranslation();\r\n  const colName = t('casualties');\r\n  const maxLabelLangth = data.reduce((maxval, currentValue) => (\r\n    (currentValue._id !== null && currentValue._id.length > maxval) ? currentValue._id.length : maxval), 0);\r\n  const isManyBarsForXAxis = (data.length > 5 || maxLabelLangth > 9);\r\n  const isManyBarsForLables = (data.length > 30);\r\n  const myFormater = (label :string | number) => {\r\n    if (typeof label === 'number' && !Number.isInteger(label)) {\r\n      return label.toFixed(1);\r\n    }\r\n    return label;\r\n  };\r\n\r\n  let bars = null;\r\n  if (barsData === undefined) {\r\n    // in regular charts\r\n    bars = (\r\n      <Bar dataKey=\"count\" name={colName} fill={fill}>\r\n        <LabelList\r\n          dataKey=\"count\"\r\n          position=\"top\"\r\n          formatter={myFormater}\r\n        />\r\n      </Bar>\r\n    );\r\n  } else {\r\n    // in charts for 2 groups\r\n    bars = barsData.map((x:any) => {\r\n      const aName = t(x.key);\r\n      const labelList = (isManyBarsForLables) ? null : <LabelList dataKey={x.key} position=\"top\" />;\r\n      return (<Bar key={`bar-${x.key}`} dataKey={x.key} name={aName} fill={x.color}>{labelList}</Bar>);\r\n    });\r\n  }\r\n  const xAxis = isManyBarsForXAxis ? (\r\n    <XAxis\r\n      dataKey=\"_id\"\r\n      textAnchor=\"end\"\r\n      interval={0}\r\n      angle={-30}\r\n      tick={{ fontSize: 12 }}\r\n    />\r\n  ) : <XAxis dataKey=\"_id\" />;\r\n  const bottomMargin = isManyBarsForXAxis ? 75 : 15;\r\n  const legend = (legendType === 'null' || width < 500) ? null\r\n    : <Legend layout=\"horizontal\" verticalAlign=\"top\" align=\"center\" />;\r\n  return (\r\n    <div style={{ direction: 'ltr' }}>\r\n      <BarChart\r\n        width={width}\r\n        height={height}\r\n        data={data}\r\n        margin={{\r\n          top: 30, right: 2, left: 2, bottom: bottomMargin,\r\n        }}\r\n      >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        {xAxis}\r\n        <YAxis />\r\n        <Tooltip />\r\n        {legend}\r\n        {bars}\r\n\r\n        {/* <Bar dataKey=\"uv\" fill=\"#82ca9d\" /> */}\r\n      </BarChart>\r\n    </div>\r\n  );\r\n});\r\nexport default memo(MyBarChart);\r\n","import React, { memo } from 'react';\r\nimport {\r\n  PieChart, Pie, Tooltip, PieLabelRenderProps,\r\n} from 'recharts';\r\nimport { observer } from 'mobx-react';\r\n// import { useTranslation } from 'react-i18next';\r\nimport { useStore } from '../../stores/storeConfig';\r\n\r\n// const data = [\r\n//   { name: 'Page A', uv: 4000, pv: 2400, amt: 2400,},\r\n//   { name: 'Page B', uv: 3000, pv: 1398, amt: 2210,},\r\n//   { name: 'Page C', uv: 2000, pv: 9800, amt: 2290,},\r\n// ];\r\n\r\ninterface IProps {\r\n    data: readonly any[]\r\n    barsData?: any\r\n    width?: number\r\n    fill?: string,\r\n    legendType?: string\r\n}\r\n\r\nconst RADIAN = Math.PI / 180;\r\nconst renderCustomizedLabel = ({\r\n  cx, cy, midAngle, innerRadius, outerRadius, percent, name,\r\n  fcx = (cx === undefined) ? 0 : +cx,\r\n  fcy = (cy === undefined) ? 0 : +cy,\r\n  inR = (innerRadius === undefined) ? 1 : +innerRadius,\r\n  outR = (outerRadius === undefined) ? 1 : +outerRadius,\r\n  midA = (midAngle === undefined) ? 1 : +midAngle,\r\n  p = (percent === undefined) ? 1 : +percent,\r\n} : PieLabelRenderProps) => {\r\n  const radius = inR + (outR - inR) * 0.7;\r\n  const x = fcx + radius * Math.cos(-midA * RADIAN);\r\n  const y = fcy + radius * Math.sin(-midA * RADIAN);\r\n  return (\r\n    <text x={x} y={y} fill=\"white\" textAnchor={x > fcx ? 'start' : 'end'} dominantBaseline=\"central\">\r\n      {`${(p * 100).toFixed(0)}%`}\r\n    </text>\r\n  );\r\n};\r\n\r\nconst MyPieChart: React.FC<IProps> = observer(({\r\n  data, width = 390, fill = '#8884d8',\r\n}) => {\r\n  const { uiStore } = useStore();\r\n  const { showPercentageChart } = uiStore;\r\n  //   const colName = t('casualties');\r\n  //   const bottomMargin = isManyBarsForXAxis ? 75 : 15;\r\n  //   const legend = (legendType === 'null' || width < 500) ? null\r\n  //     : <Legend layout=\"horizontal\" verticalAlign=\"top\" align=\"center\" />;\r\n  const mylabel = (showPercentageChart) ? renderCustomizedLabel : true;\r\n  return (\r\n    <div style={{ direction: 'ltr' }}>\r\n      <PieChart width={width} height={width}>\r\n        <Pie\r\n          dataKey=\"count\"\r\n          nameKey=\"_id\"\r\n          isAnimationActive={false}\r\n          data={data}\r\n          cx={200}\r\n          cy={200}\r\n          fill={fill}\r\n          labelLine={!showPercentageChart}\r\n          label={mylabel}\r\n          // label\r\n        />\r\n        <Tooltip />\r\n      </PieChart>\r\n    </div>\r\n  );\r\n});\r\nexport default memo(MyPieChart);\r\n","// @ts-nocheck\r\nimport React, { memo } from 'react';\r\nimport { Treemap } from 'recharts';\r\nimport { observer } from 'mobx-react';\r\n\r\ninterface IProps {\r\n    data: readonly any[];\r\n    barsData?: any;\r\n    width?: number;\r\n    height?: number;\r\n    fill?: string;\r\n}\r\n\r\nconst MyTreeMap: React.FC<IProps> = observer(({\r\n  data, width = 390, height = 250, fill = '#8884d8',\r\n}) => {\r\n  const data2 = data.map((x) => ({ name: x._id, count: x.count }));\r\n  return (\r\n    <div style={{ direction: 'ltr' }}>\r\n      <Treemap\r\n        width={width}\r\n        height={height}\r\n        data={data2}\r\n        dataKey=\"count\"\r\n        // nameKey=\"_id\"\r\n        ratio={4 / 3}\r\n        stroke=\"#fff\"\r\n        fill={fill}\r\n      />\r\n    </div>\r\n  );\r\n});\r\nexport default memo(MyTreeMap);\r\n","import React, { ChangeEvent, useCallback } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from 'mobx-react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Checkbox from '../atoms/Checkbox';\r\nimport { useStore } from '../../stores/storeConfig';\r\n\r\ninterface IProps { }\r\nconst ConfigChart: React.FC<IProps> = observer(() => {\r\n  const { t } = useTranslation();\r\n  const { uiStore } = useStore();\r\n  const {\r\n    chartType, chartTypeList, updateChartType, showPercentageChart, updateShowPercentageChart,\r\n  } = uiStore;\r\n  const onSelectChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\r\n    updateChartType(event.target.value);\r\n  }, [updateChartType]);\r\n  return (\r\n    <div>\r\n      <Form.Group controlId=\"ConfigFile.SelectChartType\">\r\n        {t('ChartType')}\r\n        <Form.Control\r\n          as=\"select\"\r\n          value={chartType}\r\n          onChange={onSelectChange}\r\n        >\r\n          {Object.entries(chartTypeList).map(([key, x]: any[]) => (<option value={x} key={key}>{t(x)}</option>))}\r\n        </Form.Control>\r\n      </Form.Group>\r\n      <Form.Group controlId=\"ConfigFile.ControlShowPercentageChart\">\r\n        <Checkbox\r\n          key={2}\r\n          label=\"PercentageChart\"\r\n          group=\"ChartConfig\"\r\n          id={2}\r\n          checked={showPercentageChart}\r\n          onChange={(e: ChangeEvent<HTMLInputElement>) => {\r\n            updateShowPercentageChart(e.target.checked);\r\n          }}\r\n        />\r\n      </Form.Group>\r\n    </div>\r\n  );\r\n});\r\nexport default ConfigChart;\r\n","import React, { useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from 'mobx-react';\r\nimport { toJS } from 'mobx';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { useStore } from '../../stores/storeConfig';\r\nimport SmallCard from '../atoms/SmallCard';\r\nimport SelectGroupBy from '../atoms/SelectGroupBy';\r\nimport SelectGroupBy2 from '../atoms/SelectGroupBy2';\r\n// import { RangeSlider } from '../atoms/RangeSlider'\r\nimport MyBarChart from '../molecules/MyBarChart';\r\nimport MyPieChart from '../molecules/MyPieChart';\r\nimport MyTreeMap from '../molecules/MyTreeMap';\r\nimport ConfigFilterModal from './ConfigFilterModal';\r\nimport ConfigChart from '../molecules/ConfigChart';\r\nimport gearlogo from '../../assets/gear2.png';\r\n\r\ninterface IProps { }\r\nconst getSize = (width: number) => {\r\n  let size: number = 500;\r\n  if (width <= 350) size = 300;\r\n  else if (width <= 760) size = width * 0.85;\r\n  else if (width <= 1500) size = width * 0.75;\r\n  else size = 1200;\r\n  return size;\r\n};\r\n\r\nexport const GroupByGraphsPanel: React.FC<IProps> = observer(() => {\r\n  const styles = {\r\n    divStyle: {\r\n      marginLeft: '0',\r\n      marginRight: '0',\r\n      marginTop: '20px',\r\n    },\r\n  };\r\n  const { filterStore } = useStore();\r\n  const { dataByYears } = filterStore;\r\n  const reactData1 = toJS(dataByYears);\r\n  if (reactData1.length > 0) {\r\n    return (\r\n      <div className=\"row\" style={styles.divStyle}>\r\n        <CardChartYears />\r\n        <CardChartByGroup1 />\r\n        <CardChartGrpBy2 />\r\n      </div>\r\n    );\r\n  }\r\n  return null;\r\n});\r\n\r\nconst CardChartYears: React.FC<IProps> = observer(() => {\r\n  const { t } = useTranslation();\r\n  const [graphSize, setGraphSize] = useState(getSize(window.innerWidth));\r\n  React.useEffect(() => {\r\n    function handleResize() {\r\n      const size = getSize(window.innerWidth);\r\n      setGraphSize(size);\r\n    }\r\n    window.addEventListener('resize', handleResize);\r\n    return (() => { window.removeEventListener('resize', handleResize); });\r\n  });\r\n  const graph1Size = Math.min(380, graphSize);\r\n  const { filterStore } = useStore();\r\n  const { dataFilterdByYears, casualtiesNames } = filterStore;\r\n  const reactData2 = toJS(dataFilterdByYears);\r\n  return (\r\n    <SmallCard styleType={2} title={`${t(casualtiesNames)} ${t('by-years')}`}>\r\n      <MyBarChart data={reactData2} width={graph1Size} fill=\"#FE9772\" />\r\n    </SmallCard>\r\n  );\r\n});\r\n\r\nconst CardChartByGroup1: React.FC<IProps> = observer(() => {\r\n  const styles = {\r\n    divStyle: {\r\n      display: 'flex',\r\n      justifyContent: 'space-between',\r\n    },\r\n    iconStyle: {\r\n      height: '21px',\r\n      width: '21px',\r\n      paddingTop: '0px',\r\n      paddingBottom: '1px',\r\n    },\r\n  };\r\n  // const { t } = useTranslation();\r\n  const [showModel, setShowModal] = useState(false);\r\n  const [graphSize, setGraphSize] = useState(getSize(window.innerWidth));\r\n  const graph2Size = Math.min(600, graphSize);\r\n  React.useEffect(() => {\r\n    function handleResize() {\r\n      const size = getSize(window.innerWidth);\r\n      setGraphSize(size);\r\n    }\r\n    window.addEventListener('resize', handleResize);\r\n    return (() => { window.removeEventListener('resize', handleResize); });\r\n  });\r\n  const { filterStore, uiStore } = useStore();\r\n  const { dataFilterd } = filterStore;\r\n  const reactData3 = toJS(dataFilterd);\r\n  const { chartType } = uiStore;\r\n  let chart = null;\r\n  if (chartType === 'BarChart') chart = <MyBarChart data={reactData3} width={graph2Size} height={graph2Size * 0.65} />;\r\n  else if (chartType === 'PieChart') chart = <MyPieChart data={reactData3} width={graph2Size * 0.65} />;\r\n  else chart = <MyTreeMap data={reactData3} />;\r\n  return (\r\n    <SmallCard styleType={3}>\r\n      <div style={styles.divStyle}>\r\n        <SelectGroupBy id=\"Graphs.Main\" />\r\n        <Button onClick={() => { setShowModal(!showModel); }}>\r\n          <img src={gearlogo} alt=\"settings\" style={styles.iconStyle} />\r\n        </Button>\r\n      </div>\r\n      <ConfigFilterModal title=\"Chart Options\" showModal={showModel} setShow={setShowModal}>\r\n        <ConfigChart />\r\n      </ConfigFilterModal>\r\n      {chart}\r\n    </SmallCard>\r\n  );\r\n});\r\n\r\nconst CardChartGrpBy2: React.FC<IProps> = observer(() => {\r\n  const styleLable = {\r\n    fontWeight: 700,\r\n    marginTop: '5px',\r\n    marginLeft: '20px',\r\n    marginRight: '20px',\r\n  };\r\n  const divConstolsRow = {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  } as React.CSSProperties;\r\n  const { t } = useTranslation();\r\n  const [graphSize, setGraphSize] = useState(getSize(window.innerWidth));\r\n  React.useEffect(() => {\r\n    function handleResize() {\r\n      const size = getSize(window.innerWidth);\r\n      setGraphSize(size);\r\n    }\r\n    window.addEventListener('resize', handleResize);\r\n    return (() => { window.removeEventListener('resize', handleResize); });\r\n  });\r\n  const { filterStore } = useStore();\r\n  const { groupBy2, groupBy } = filterStore;\r\n  const barsGrp2 = groupBy2.getBars();\r\n  const reactDataGrp2 = toJS(filterStore.dataGroupby2);\r\n  const show = (groupBy.text !== 'CityByPop');\r\n  return (\r\n    <div>\r\n      {show\r\n    && (\r\n    <SmallCard width={graphSize + 150}>\r\n      <div style={divConstolsRow}>\r\n        <span style={styleLable}>\r\n          {' '}\r\n          {t('GroupBy')}\r\n          :\r\n        </span>\r\n        <SelectGroupBy id=\"Graphs.Grp2\" labelText=\"\" />\r\n        <SelectGroupBy2 id=\"Graphs\" />\r\n        {/* <RangeSlider id=\"Graphs\" label=\"resize\" value={80} onChange={onSizeSliderChange}/> */}\r\n      </div>\r\n      <MyBarChart data={reactDataGrp2} barsData={barsGrp2} width={graphSize} height={graphSize * 0.62} legendType=\"top\" />\r\n    </SmallCard>\r\n    )}\r\n    </div>\r\n  );\r\n});\r\nexport default GroupByGraphsPanel;\r\n"],"sourceRoot":""}