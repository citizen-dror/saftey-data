{"version":3,"sources":["components/atoms/SmallCard.tsx","components/atoms/SelectGroupBy.tsx","components/atoms/SelectGroupBy2.tsx","components/molecules/MyBarChart.tsx","components/organisms/GroupByGraphsPanel.tsx"],"names":["SmallCard","title","styleType","width","children","styleCard","borderRadius","padding","margin","aHeder","Header","style","SelectGroupBy","observer","id","labelText","t","useTranslation","filterStore","useStore","groupByDict","groupBy","updateGroupby","lable","Label","className","onSelectChange","useCallback","event","target","value","Group","controlId","Control","as","text","onChange","Object","entries","map","key","x","SelectGroupBy2","group2Dict","groupBy2","updateGroupBy2","MyBarChart","data","barsData","height","fill","legendType","colName","bars","undefined","dataKey","name","position","aName","color","maxLabelLangth","reduce","maxval","currentValue","_id","length","isManyBars","xAxis","textAnchor","interval","angle","tick","fontSize","bottomMargin","legend","layout","verticalAlign","align","direction","top","right","left","bottom","strokeDasharray","memo","getSize","GroupByGraphsPanel","dataByYears","toJS","marginLeft","marginRight","marginTop","CardChartYears","CardChartByGroup1","CardChartGrpBy2","useState","window","innerWidth","graphSize","setGraphSize","React","useEffect","handleResize","size","addEventListener","removeEventListener","graph1Size","Math","min","dataFilterdByYears","casualtiesNames","reactData2","graph2Size","dataFilterd","reactData3","barsGrp2","getBars","reactDataGrp2","dataGroupby2","display","flexWrap","fontWeight"],"mappings":"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","file":"static/js/8.a3108147.chunk.js","sourcesContent":["import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\ninterface IProps {\r\n    title?: string,\r\n    styleType?: number\r\n    width?: number\r\n}\r\nconst SmallCard: React.FC<IProps> = ({\r\n  title, styleType = 0, width = 0, children,\r\n}) => {\r\n  const styleWidth: any[] = [\r\n    '15rem', '20rem', '25rem', '40rem',\r\n  ];\r\n  const styleCard: any = {\r\n    borderRadius: '5px',\r\n    padding: '5px',\r\n    margin: '7px',\r\n  };\r\n  const aHeder = title ? <Card.Header>{title}</Card.Header> : '';\r\n  if (width > 0) styleCard.width = width;\r\n  else styleCard.width = styleWidth[styleType];\r\n  return (\r\n    <Card style={styleCard}>\r\n      {aHeder}\r\n      {children}\r\n    </Card>\r\n  );\r\n};\r\nexport default SmallCard;\r\n","import React, { ChangeEvent, useCallback } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from 'mobx-react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { useStore } from '../../stores/storeConfig';\r\n\r\ninterface IProps {\r\n    id: string,\r\n    labelText?: string,\r\n}\r\nconst SelectGroupBy: React.FC<IProps> = observer(({ id, labelText = 'GroupBy' }) => {\r\n  const { t } = useTranslation();\r\n  const { filterStore } = useStore();\r\n  const { groupByDict, groupBy, updateGroupby } = filterStore;\r\n  const lable = (labelText !== '') ? (\r\n    <Form.Label className=\"filterLable\">\r\n      {' '}\r\n      {t(labelText)}\r\n:\r\n    </Form.Label>\r\n  ) : null;\r\n  const onSelectChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\r\n    updateGroupby(event.target.value);\r\n  }, [updateGroupby]);\r\n\r\n  return (\r\n    <Form className=\"form-inline\">\r\n      <Form.Group controlId={`GrupForm.${id}.SelectGroupBy`}>\r\n        {lable}\r\n        <Form.Control\r\n          as=\"select\"\r\n          value={groupBy.text}\r\n          onChange={onSelectChange}\r\n        >\r\n          {Object.entries(groupByDict).map(([key, x]: any[]) => (<option value={x.text} key={key}>{t(x.text)}</option>))}\r\n        </Form.Control>\r\n      </Form.Group>\r\n    </Form>\r\n  );\r\n});\r\nexport default SelectGroupBy;\r\n","import React, { ChangeEvent, useCallback } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from 'mobx-react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { useStore } from '../../stores/storeConfig';\r\n\r\n\r\ninterface IProps { id: string }\r\n\r\nconst SelectGroupBy2: React.FC<IProps> = observer(({ id }) => {\r\n  const { t } = useTranslation();\r\n  const { filterStore } = useStore();\r\n  const { group2Dict, groupBy2, updateGroupBy2 } = filterStore;\r\n  const onSelectChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\r\n    updateGroupBy2(event.target.value);\r\n  }, [updateGroupBy2]);\r\n  return (\r\n    <Form className=\"form-inline\">\r\n      <Form.Group controlId={`GrupForm.${id}.SelectGroupBy2`}>\r\n        {/* <Form.Label className=\"filterLable\"> {t('GroupBy')}:</Form.Label> */}\r\n        <Form.Control\r\n          as=\"select\"\r\n          value={groupBy2.text}\r\n          onChange={onSelectChange}\r\n        >\r\n          {Object.entries(group2Dict).map(([key, x]: any[]) => (<option value={x.text} key={key}>{t(x.text)}</option>))}\r\n        </Form.Control>\r\n      </Form.Group>\r\n    </Form>\r\n  );\r\n});\r\nexport default SelectGroupBy2;\r\n","import React, { memo } from 'react';\r\nimport {\r\n  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, LabelList,\r\n} from 'recharts';\r\nimport { observer } from 'mobx-react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\n// const data = [\r\n//   { name: 'Page A', uv: 4000, pv: 2400, amt: 2400,},\r\n//   { name: 'Page B', uv: 3000, pv: 1398, amt: 2210,},\r\n//   { name: 'Page C', uv: 2000, pv: 9800, amt: 2290,},\r\n// ];\r\n\r\ninterface IProps {\r\n  data :readonly any[]\r\n  barsData ?: any\r\n  width? : number\r\n  height? : number,\r\n  fill? : string,\r\n  legendType? : string\r\n}\r\n\r\nconst MyBarChart:React.FC<IProps> = observer(({\r\n  data, barsData, width = 390, height = 350, fill = '#8884d8', legendType = 'null',\r\n}) => {\r\n  const { t } = useTranslation();\r\n  const colName = t('casualties');\r\n  let bars = null;\r\n  if (barsData === undefined) {\r\n    bars = <Bar dataKey=\"count\" name={colName} fill={fill}><LabelList dataKey=\"count\" position=\"top\" /></Bar>;\r\n  } else {\r\n    bars = barsData.map((x:any) => {\r\n      const aName = t(x.key);\r\n      return (<Bar key={`bar-${x.key}`} dataKey={x.key} name={aName} fill={x.color}> </Bar>);\r\n    });\r\n  }\r\n  const maxLabelLangth = data.reduce((maxval, currentValue) => (\r\n    (currentValue._id !== null && currentValue._id.length > maxval) ? currentValue._id.length : maxval), 0);\r\n  const isManyBars = (data.length > 5 || maxLabelLangth > 9);\r\n  const xAxis = isManyBars ? (\r\n    <XAxis\r\n      dataKey=\"_id\"\r\n      textAnchor=\"end\"\r\n      interval={0}\r\n      angle={-30}\r\n      tick={{ fontSize: 12 }}\r\n    />\r\n  ) : <XAxis dataKey=\"_id\" />;\r\n  const bottomMargin = isManyBars ? 75 : 15;\r\n  const legend = (legendType === 'null' || width < 500) ? null : <Legend layout=\"horizontal\" verticalAlign=\"top\" align=\"center\" />;\r\n  return (\r\n    <div style={{ direction: 'ltr' }}>\r\n      <BarChart\r\n        width={width}\r\n        height={height}\r\n        data={data}\r\n        margin={{\r\n          top: 20, right: 2, left: 2, bottom: bottomMargin,\r\n        }}\r\n      >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        {xAxis}\r\n        <YAxis />\r\n        <Tooltip />\r\n        {legend}\r\n        {bars}\r\n\r\n        {/* <Bar dataKey=\"uv\" fill=\"#82ca9d\" /> */}\r\n      </BarChart>\r\n    </div>\r\n  );\r\n});\r\nexport default memo(MyBarChart);\r\n","import React, { useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from 'mobx-react';\r\nimport { toJS } from 'mobx';\r\nimport { useStore } from '../../stores/storeConfig';\r\nimport SmallCard from '../atoms/SmallCard';\r\nimport SelectGroupBy from '../atoms/SelectGroupBy';\r\nimport SelectGroupBy2 from '../atoms/SelectGroupBy2';\r\n// import { RangeSlider } from '../atoms/RangeSlider'\r\nimport MyBarChart from '../molecules/MyBarChart';\r\n\r\ninterface IProps { }\r\nconst getSize = (width: number) => {\r\n  let size: number = 500;\r\n  if (width <= 350) size = 300;\r\n  else if (width <= 760) size = width * 0.85;\r\n  else if (width <= 1500) size = width * 0.75;\r\n  else size = 1200;\r\n  return size;\r\n};\r\n\r\nexport const GroupByGraphsPanel: React.FC<IProps> = observer(() => {\r\n  const style = {\r\n    marginLeft: '0',\r\n    marginRight: '0',\r\n    marginTop: '20px',\r\n  };\r\n  const { filterStore } = useStore();\r\n  const { dataByYears } = filterStore;\r\n  const reactData1 = toJS(dataByYears);\r\n  if (reactData1.length > 0) {\r\n    return (\r\n      <div className=\"row\" style={style}>\r\n        <CardChartYears />\r\n        <CardChartByGroup1 />\r\n        <CardChartGrpBy2 />\r\n      </div>\r\n    );\r\n  }\r\n  return null;\r\n});\r\n\r\nconst CardChartYears: React.FC<IProps> = observer(() => {\r\n  const { t } = useTranslation();\r\n  const [graphSize, setGraphSize] = useState(getSize(window.innerWidth));\r\n  React.useEffect(() => {\r\n    function handleResize() {\r\n      const size = getSize(window.innerWidth);\r\n      setGraphSize(size);\r\n    }\r\n    window.addEventListener('resize', handleResize);\r\n    return (() => { window.removeEventListener('resize', handleResize); });\r\n  });\r\n  const graph1Size = Math.min(380, graphSize);\r\n  const { filterStore } = useStore();\r\n  const { dataFilterdByYears, casualtiesNames } = filterStore;\r\n  const reactData2 = toJS(dataFilterdByYears);\r\n  return (\r\n    <SmallCard styleType={2} title={`${t(casualtiesNames)} ${t('by-years')}`}>\r\n      <MyBarChart data={reactData2} width={graph1Size} fill=\"#FE9772\" />\r\n    </SmallCard>\r\n  );\r\n});\r\n\r\nconst CardChartByGroup1: React.FC<IProps> = observer(() => {\r\n  const [graphSize, setGraphSize] = useState(getSize(window.innerWidth));\r\n  const graph2Size = Math.min(600, graphSize);\r\n  React.useEffect(() => {\r\n    function handleResize() {\r\n      const size = getSize(window.innerWidth);\r\n      setGraphSize(size);\r\n    }\r\n    window.addEventListener('resize', handleResize);\r\n    return (() => { window.removeEventListener('resize', handleResize); });\r\n  });\r\n  const { filterStore } = useStore();\r\n  const { dataFilterd } = filterStore;\r\n  const reactData3 = toJS(dataFilterd);\r\n  return (\r\n    <SmallCard styleType={3}>\r\n      <SelectGroupBy id=\"Graphs.Main\" />\r\n      <MyBarChart data={reactData3} width={graph2Size} height={graph2Size * 0.65} />\r\n    </SmallCard>\r\n  );\r\n});\r\n\r\nconst CardChartGrpBy2: React.FC<IProps> = observer(() => {\r\n  const styleLable = {\r\n    fontWeight: 700,\r\n    marginTop: '5px',\r\n    marginLeft: '20px',\r\n    marginRight: '20px',\r\n  };\r\n  const divConstolsRow = {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  } as React.CSSProperties;\r\n  const { t } = useTranslation();\r\n  const [graphSize, setGraphSize] = useState(getSize(window.innerWidth));\r\n  React.useEffect(() => {\r\n    function handleResize() {\r\n      const size = getSize(window.innerWidth);\r\n      setGraphSize(size);\r\n    }\r\n    window.addEventListener('resize', handleResize);\r\n    return (() => { window.removeEventListener('resize', handleResize); });\r\n  });\r\n  const { filterStore } = useStore();\r\n  const { groupBy2 } = filterStore;\r\n  const barsGrp2 = groupBy2.getBars();\r\n  const reactDataGrp2 = toJS(filterStore.dataGroupby2);\r\n  return (\r\n    <SmallCard width={graphSize + 150}>\r\n      <div style={divConstolsRow}>\r\n        <span style={styleLable}>\r\n          {' '}\r\n          {t('GroupBy')}\r\n          :\r\n        </span>\r\n        <SelectGroupBy id=\"Graphs.Grp2\" labelText=\"\" />\r\n        <SelectGroupBy2 id=\"Graphs\" />\r\n        {/* <RangeSlider id=\"Graphs\" label=\"resize\" value={80} onChange={onSizeSliderChange}/> */}\r\n      </div>\r\n      <MyBarChart data={reactDataGrp2} barsData={barsGrp2} width={graphSize} height={graphSize * 0.62} legendType=\"top\" />\r\n    </SmallCard>\r\n  );\r\n});\r\nexport default GroupByGraphsPanel;\r\n"],"sourceRoot":""}