{"version":3,"file":"static/js/515.edb11cd9.chunk.js","mappings":"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","sources":["components/atoms/SelectGroupBy.tsx","components/atoms/SelectGroupBy2.tsx","components/chart/ChartBar.tsx","components/chart/ConfigChart.tsx","assets/SvgIconSettings.tsx","components/chart/CardChartByGroup1.tsx","components/chart/CardChartGrpBy2.tsx","components/chart/CardChartYears.tsx","components/chart/GroupByGraphsPanel.tsx"],"sourcesContent":["import React, { ChangeEvent, useCallback } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { useStore } from '../../stores/storeConfig';\r\nimport GroupBy from '../../stores/filter/GroupBy';\r\nimport MySelect from './MySelect';\r\n\r\ninterface IProps {\r\n  id: string,\r\n  labelText?: string,\r\n}\r\nconst SelectGroupBy: React.FC<IProps> = observer(({ id, labelText = 'GroupBy' }) => {\r\n  const { filterStore } = useStore();\r\n  const { groupByDict, updateGroupby } = filterStore;\r\n\r\n  const onSelectChange = useCallback((event: ChangeEvent<HTMLSelectElement>) => {\r\n    updateGroupby(event.target.value);\r\n  }, [updateGroupby]);\r\n\r\n  const fixData = groupByDict.arrGroups;\r\n  const val = (groupByDict.groupBy as GroupBy).value;\r\n  return (\r\n    <MySelect\r\n      onChange={onSelectChange}\r\n      label={'GroupBy'}\r\n      data={fixData}\r\n      valProp=\"value\"\r\n      contentProp=\"text\"\r\n      value={val}\r\n      style= {{'display':'flex', 'height':'30px'}}\r\n      cssClass=\"form-select-m\"\r\n    />\r\n  );\r\n});\r\nexport default SelectGroupBy;\r\n","import React, { ChangeEvent, useCallback } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from 'mobx-react';\r\n\r\nimport { useStore } from '../../stores/storeConfig';\r\nimport GroupBy2 from '../../stores/filter/GroupBy2';\r\nimport MySelect from './MySelect';\r\n\r\ninterface IProps { id: string }\r\n\r\nconst SelectGroupBy2: React.FC<IProps> = observer(({ id }) => {\r\n  const { t } = useTranslation();\r\n  const { filterStore } = useStore();\r\n  const { group2Dict, updateGroupBy2 } = filterStore;\r\n  const onSelectChange = useCallback((event: ChangeEvent<HTMLSelectElement>) => {\r\n    updateGroupBy2(event.target.value);\r\n  }, [updateGroupBy2]);\r\n\r\n  const fixData = group2Dict.arrGroups;\r\n  const val = (group2Dict.groupBy as GroupBy2).name;\r\n\r\n  return (\r\n    <MySelect\r\n      onChange={onSelectChange}\r\n      data={fixData}\r\n      // label={t('GroupBy')}\r\n      valProp=\"value\"\r\n      contentProp=\"text\"\r\n      value={val}\r\n    />\r\n  );\r\n});\r\nexport default SelectGroupBy2;\r\n","import React from 'react';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  ArcElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport { Bar, Pie } from 'react-chartjs-2';\r\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\n// import { useTranslation } from 'react-i18next';\r\n// import { Bar, Pie } from 'react-chartjs-2';\r\n// import 'chartjs-plugin-datalabels';\r\n\r\ninterface IProps {\r\n  data: readonly any[];\r\n  metaData?: any[];\r\n  chartType?: string;\r\n  height?: number;\r\n  fill?: string;\r\n  dir: string;\r\n}\r\n\r\nconst getColorPallete = (chartType: string, length: number, defColor: string) => {\r\n  let res;\r\n  if (chartType === 'PieChart') {\r\n    if (length < 3)\r\n      res = ['#031E47', '#6791B2']\r\n    else if (length < 6)\r\n      res = ['#031E47', '#24446B', '#466B8F', '#6791B2', '#88B7D6']\r\n    else {\r\n      res = ['#031E47', '#19385F', '#2F5177', '#466B8F', '#5C84A6', '#729EBE', '#88B7D6',\r\n        '#07681F', '#2D7B2C', '#538E39', '#7AA146', '#A0B352', '#C6C65F', '#ECD96C',\r\n        '#540455', '#671E6A', '#7A377F', '#8D5194', '#A06BA9', '#B384BE', '#C69ED3'\r\n      ];\r\n    }\r\n  }\r\n  else {\r\n    res = defColor;\r\n  }\r\n  return res;\r\n};\r\n\r\n// const ChartBar: React.FC<IProps> = ({ data, metaData, chartType = 'BarChart', height = 60, dir, fill = '#8884d8', }: IProps) => {\r\n//   const { t } = useTranslation();\r\n//   let dataChart;\r\n//   // if metaData == undefined - chart of 1 group\r\n//   if (metaData == undefined) {\r\n//     const labels = data.map((x) => x._id);\r\n//     const vals = data.map((x) => x.count);\r\n//     const label = t('casualties');\r\n//     const backgroundColor = getColorPallete(chartType, data.length, fill);\r\n//     dataChart = {\r\n//       labels,\r\n//       datasets: [\r\n//         {\r\n//           label,\r\n//           backgroundColor: backgroundColor,\r\n//           borderColor: 'rgba(255,255,255,0.7)',\r\n//           borderWidth: 1,\r\n//           // hoverBackgroundColor: 0.7,\r\n//           hoverBorderColor: 'rgba(255,99,132,1)',\r\n//           data: vals,\r\n//         },\r\n//       ],\r\n//     };\r\n//   }\r\n//   else {\r\n//     const labels = data.map((x) => x._id);\r\n//     const datasets1 = metaData.map((x: any) => {\r\n//       const name = t(x.key);\r\n//       const fill = x.color;\r\n//       const vals = data.map((row) => row[x.key]);\r\n//       return {\r\n//         label: name,\r\n//         backgroundColor: fill,\r\n//         hoverBackgroundColor: 'rgba(255,99,132,0.4)',\r\n//         hoverBorderColor: 'rgba(255,99,132,1)',\r\n//         data: vals,\r\n//       };\r\n//     });\r\n//     dataChart = {\r\n//       labels,\r\n//       datasets: datasets1,\r\n//     };\r\n//   };\r\n//   let align = (dir === 'rtl') ? '-40' : 'end';\r\n//   const options1 = {\r\n//     responsive: true,\r\n//     maintainAspectRatio: false,\r\n//     scales: {\r\n//       yAxes: [{\r\n//         ticks: {\r\n//           beginAtZero: true,\r\n//           min: 0,\r\n//         },\r\n//       }],\r\n//     },\r\n//     plugins: {\r\n//       datalabels: {\r\n//         display: true,\r\n//         align: align,\r\n//         anchor: \"end\",\r\n//         font: { size: \"14\" }\r\n\r\n//       }\r\n//     },\r\n//     legend: {\r\n//       display: true\r\n//     }\r\n//   };\r\n//   if (chartType === 'BarChart') {\r\n//     return (\r\n//       <Bar\r\n//         data={dataChart}\r\n//         //height={height}\r\n//         //options={options1}\r\n//       />\r\n//     );\r\n//   }\r\n//   if (chartType === 'HorizontalBar') {\r\n//     const offset = (dir === 'rtl') ? 20 : 4;\r\n//     return (\r\n//       <h1>HorizontalBarChart</h1>\r\n//       // <HorizontalBarChart\r\n//       //   data={dataChart}\r\n//       //   options={\r\n//       //     {\r\n//       //       responsive: true,\r\n//       //       maintainAspectRatio: false,\r\n//       //       plugins: {\r\n//       //         datalabels: {\r\n//       //           display: true,\r\n//       //           anchor: \"end\",\r\n//       //           align: 'end',\r\n//       //           offset : offset,\r\n//       //           font: { size: \"14\" }\r\n//       //         }\r\n//       //       }\r\n//       //     }}\r\n//       // />\r\n//     );\r\n//   }\r\n//   return (\r\n//     <Pie\r\n//       data={dataChart}\r\n//       options={{\r\n//         responsive: true,\r\n//         // plugins: {\r\n//         //   datalabels: {\r\n//         //     display: true,\r\n//         //     color: 'white',\r\n//         //     align: align\r\n//         //   }\r\n//         // }\r\n//       }}\r\n//     />\r\n//   );\r\n// };\r\n\r\n// const options = {\r\n//   indexAxis: 'y', // This makes it a horizontal bar chart\r\n//   scales: {\r\n//     x: {\r\n//       beginAtZero: true,\r\n//     },\r\n//   },\r\n// };\r\n\r\n// interface IPropsHorizontalBar {\r\n//   data: readonly any[];\r\n//   //options1: any;\r\n// }\r\n// // const HorizontalBarChart: React.FC<IPropsHorizontalBar> = ({ data}: IProps) =>{\r\n// //   return <Bar data={data}  />;\r\n// // };\r\n\r\n// export default ChartBar;\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  ArcElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  ChartDataLabels\r\n);\r\n\r\n\r\nexport const datalabelsOptions=  {\r\n  anchor: 'end', // Label position relative to the bar\r\n  align: 'top', // Alignment of the label\r\n  textAlign: \"center\",\r\n  font: {\r\n    size: 12, // Font size\r\n    weight: 'bold', // Font weight\r\n  }\r\n};\r\n\r\nexport const options = {\r\n  responsive: true,\r\n  maintainAspectRatio: false,\r\n  indexAxis: \"x\" as \"x\" | \"y\",\r\n  plugins: {\r\n    legend: {\r\n      position: 'top' as const,\r\n    },\r\n  },\r\n};\r\n\r\nconst ChartBar: React.FC<IProps> = ({ data, metaData, chartType = 'BarChart', height = 60, dir, fill = '#8884d8', }: IProps) => {\r\n  const { t } = useTranslation();\r\n  // if metaData == undefined - chart of 1 group\r\n  //if (metaData == undefined) {\r\n  const label = t('casualties');\r\n  const backgroundColor = getColorPallete(chartType, data.length, fill);\r\n  //}\r\n  // Extract labels and data\r\n  const labels = data.map(item => item._id);\r\n\r\n  // Create the chart data structure\r\n  let datasets: any;\r\n  if (metaData === undefined) {\r\n    // chart of gorup 1\r\n    const counts = data.map(item => item.count);\r\n    datasets = [\r\n      {\r\n        label: label,\r\n        data: counts,\r\n        backgroundColor: backgroundColor\r\n      },\r\n    ];\r\n  } else {\r\n    // Dynamically generate datasets based on MethData and data\r\n    datasets = metaData.map((method) => {\r\n      return {\r\n        label: t(method.key), //method.key.charAt(0).toUpperCase() + method.key.slice(1),  \r\n        data: data.map(item => item[method.key] || 0),  // Use key from MethData to access values in data\r\n        backgroundColor: method.color, // backgroundColor from MethData\r\n        axis: 'x',\r\n      };\r\n    });\r\n  }\r\n  const chartData = {\r\n    labels: labels, // Years as labels\r\n    datasets: datasets\r\n  };\r\n  if (chartType === 'BarChart') {    \r\n    Object.assign(options.plugins, { datalabels: datalabelsOptions }); \r\n    return (\r\n      <div style={{ height: '100%'}}>\r\n        <Bar options={options} data={chartData} />\r\n      </div>\r\n    );\r\n  } else if (chartType === 'PieChart') {       \r\n    return (\r\n      <>\r\n        <Pie options={options} data={chartData} />\r\n      </>\r\n    );\r\n  } else { \r\n    //HorizontalBar\r\n    //options.indexAxis= \"y\" as \"y\";\r\n    const options1 = ({indexAxis: \"y\" as \"y\"})\r\n    // chartData.datasets = chartData.datasets.map((dataset: any) => ({\r\n    //   ...dataset,\r\n    //   axis: \"y\",\r\n    // }));\r\n    return (\r\n      <div >\r\n        <Bar options={options1} data={chartData} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default ChartBar;\r\n","import React, { ChangeEvent, useCallback } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from 'mobx-react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { useStore } from '../../stores/storeConfig';\r\n// import Checkbox from '../atoms/Checkbox';\r\n\r\ninterface IProps { }\r\nconst ConfigChart: React.FC<IProps> = observer(() => {\r\n  const { t } = useTranslation();\r\n  const { uiStore } = useStore();\r\n  const {\r\n    chartType, chartTypeList, updateChartType, // showPercentageChart, updateShowPercentageChart,\r\n  } = uiStore;\r\n  const onSelectChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\r\n    updateChartType(event.target.value);\r\n  }, [updateChartType]);\r\n  return (\r\n    <div>\r\n      <Form.Group controlId=\"ConfigFile.SelectChartType\">\r\n        {t('ChartType')}\r\n        <Form.Control\r\n          as=\"select\"\r\n          value={chartType}\r\n          onChange={onSelectChange}\r\n        >\r\n          {Object.entries(chartTypeList)\r\n            .map(([key, x]: any[]) => (<option value={x} key={key}>{t(x)}</option>))}\r\n        </Form.Control>\r\n      </Form.Group>\r\n      {/* <Form.Group controlId=\"ConfigFile.ControlShowPercentageChart\">\r\n        <Checkbox\r\n          key={2}\r\n          label=\"PercentageChart\"\r\n          group=\"ChartConfig\"\r\n          id={2}\r\n          checked={showPercentageChart}\r\n          onChange={(e: ChangeEvent<HTMLInputElement>) => {\r\n            updateShowPercentageChart(e.target.checked);\r\n          }}\r\n        />\r\n      </Form.Group> */}\r\n    </div>\r\n  );\r\n});\r\nexport default ConfigChart;\r\n","import React from \"react\"\r\n\r\nfunction SvgIconSettings(props: React.SVGProps<SVGSVGElement>) {\r\n  const color = (props.color) ? props.color : 'blue';\r\n  const height = (props.height) ? props.height : 24;\r\n  const width = (props.width) ? props.width : 24;\r\n  return (\r\n    <svg\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      height={height}\r\n      viewBox=\"0 0 24 24\"\r\n      width={width}\r\n      {...props}\r\n    >\r\n      <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\r\n      <path d=\"M19.14 12.94c.04-.3.06-.61.06-.94 0-.32-.02-.64-.07-.94l2.03-1.58a.49.49 0 00.12-.61l-1.92-3.32a.488.488 0 00-.59-.22l-2.39.96c-.5-.38-1.03-.7-1.62-.94l-.36-2.54a.484.484 0 00-.48-.41h-3.84c-.24 0-.43.17-.47.41l-.36 2.54c-.59.24-1.13.57-1.62.94l-2.39-.96c-.22-.08-.47 0-.59.22L2.74 8.87c-.12.21-.08.47.12.61l2.03 1.58c-.05.3-.09.63-.09.94s.02.64.07.94l-2.03 1.58a.49.49 0 00-.12.61l1.92 3.32c.12.22.37.29.59.22l2.39-.96c.5.38 1.03.7 1.62.94l.36 2.54c.05.24.24.41.48.41h3.84c.24 0 .44-.17.47-.41l.36-2.54c.59-.24 1.13-.56 1.62-.94l2.39.96c.22.08.47 0 .59-.22l1.92-3.32c.12-.22.07-.47-.12-.61l-2.01-1.58zM12 15.6c-1.98 0-3.6-1.62-3.6-3.6s1.62-3.6 3.6-3.6 3.6 1.62 3.6 3.6-1.62 3.6-3.6 3.6z\"\r\n        fill={color} />\r\n    </svg>\r\n  )\r\n}\r\n\r\nexport default React.memo(SvgIconSettings);","import React, { useState } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { toJS } from 'mobx';\r\n// import Button from 'react-bootstrap/Button';\r\nimport { useStore } from '../../stores/storeConfig';\r\nimport SelectGroupBy from '../atoms/SelectGroupBy';\r\nimport SmallCard2 from '../atoms/SmallCard2';\r\nimport ChartBar from './ChartBar';\r\nimport ConfigChart from './ConfigChart';\r\nimport ConfigModal from '../organisms/ConfigModal';\r\nimport { useMemos } from '../../hooks/myUseMemo';\r\nimport SvgIconSettings from '../../assets/SvgIconSettings';\r\n\r\nconst foramtDataPrecision = (data: any[]) => {\r\n    const data2 = data.map((x) => {\r\n       if (typeof x.count === 'number' && !Number.isInteger(x.count)) {\r\n          return { _id: x._id, count: x.count.toFixed(1) };\r\n       }\r\n       return { _id: x._id, count: x.count };\r\n    });\r\n    return data2;\r\n };\r\n \r\nconst CardChartByGroup1: React.FC<{}> = observer(() => {\r\n    const styles = {\r\n       divConfig: {\r\n          display: 'flex',\r\n          justifyContent: 'space-between',\r\n       },\r\n       divChart: {\r\n          width: '100%',\r\n          height: '57vh',\r\n       },\r\n    };\r\n    // const { t } = useTranslation();\r\n    const [showModel, setShowModal] = useState(false);\r\n    const { filterStore, uiStore } = useStore();\r\n    const { dataFilterd } = filterStore;\r\n    const reactData = toJS(dataFilterd);\r\n    const dataFormated = foramtDataPrecision(reactData);\r\n    const { chartType, direction } = uiStore;\r\n    const chart = <ChartBar\r\n       data={dataFormated}\r\n       fill=\"#8884d8\"\r\n       chartType={chartType}\r\n       height={150}\r\n       dir={direction}\r\n    />;\r\n    const memoSettingsIcon = useMemos([],\r\n       <SvgIconSettings color={'var(--onprimary-color)'} />\r\n    );\r\n    // const memoSettingsIcon = <SvgIconSettings color={'var(--onprimary-color)'} />;   \r\n    return (\r\n       <SmallCard2 style={{marginBottom: '0.5rem'}}>\r\n          <div style={styles.divConfig}>\r\n             <SelectGroupBy id=\"Graphs.Main\" />\r\n             {/* <Button onClick={() => { setShowModal(!showModel); }}>\r\n                {memoSettingsIcon}\r\n             </Button> */}\r\n          </div>\r\n          <ConfigModal title=\"Chart Options\" showModal={showModel} setShow={setShowModal}>\r\n             <ConfigChart />\r\n          </ConfigModal>\r\n          <div >\r\n             <hr />\r\n             <div style={styles.divChart} >\r\n                {chart}\r\n             </div>\r\n          </div>\r\n       </SmallCard2>\r\n    );\r\n });\r\n \r\n export default CardChartByGroup1;","import React, { FC } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { toJS } from 'mobx';\r\nimport { useStore } from '../../stores/storeConfig';\r\nimport GroupBy2 from '../../stores/filter/GroupBy2';\r\nimport SelectGroupBy from '../atoms/SelectGroupBy';\r\nimport SelectGroupBy2 from '../atoms/SelectGroupBy2';\r\nimport SmallCard2 from '../atoms/SmallCard2';\r\nimport ChartBar from './ChartBar';\r\n\r\ninterface IProps { }\r\nconst CardChartGrpBy2: FC<IProps> = observer(() => {\r\n   const styles = {\r\n      styleLable: {\r\n         fontWeight: 700,\r\n         marginTop: '5px',\r\n         marginLeft: '20px',\r\n         marginRight: '20px',\r\n      },\r\n      divChart: {\r\n         width: '100%',\r\n         height: '60vh',\r\n      },\r\n   }\r\n   const divConstolsRow = {\r\n      display: 'flex',\r\n      flexWrap: 'wrap',\r\n   } as React.CSSProperties;\r\n   const { filterStore, uiStore } = useStore();\r\n   const { group2Dict } = filterStore;\r\n   const { groupBy } = group2Dict;\r\n   const { chartType, direction } = uiStore;\r\n   const metaDAta = (groupBy as GroupBy2).getBars();\r\n   const reactDataGrp2 = toJS(filterStore.dataGroupby2);\r\n   const show = true;\r\n   return (\r\n      <div>\r\n         {show\r\n            && (\r\n               <SmallCard2>\r\n                  <div style={divConstolsRow}>\r\n                     <SelectGroupBy id=\"Graphs.Grp2\" labelText=\"\" />\r\n                     {' '}\r\n                     &nbsp;\r\n                     <SelectGroupBy2 id=\"Graphs\" />\r\n                     {/* <RangeSlider id=\"Graphs\" label=\"resize\" value={80} onChange={onSizeSliderChange}/> */}\r\n                  </div>\r\n                  <hr />\r\n                  <div style={styles.divChart}>\r\n                     <ChartBar data={reactDataGrp2} metaData={metaDAta} chartType={chartType} dir={direction} />\r\n                  </div>\r\n               </SmallCard2>\r\n            )}\r\n      </div>\r\n   );\r\n});\r\n\r\nexport default CardChartGrpBy2;","import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from 'mobx-react';\r\nimport { toJS } from 'mobx';\r\nimport { useStore } from '../../stores/storeConfig';\r\nimport SmallCard2 from '../atoms/SmallCard2';\r\nimport ChartBar from './ChartBar';\r\n\r\nconst CardChartYears: React.FC<{}> = observer(() => {\r\n    const { t } = useTranslation();\r\n    const { filterStore, uiStore } = useStore();\r\n    const { dataFilterdByYears, casualtiesNames } = filterStore;\r\n    const { direction } = uiStore;\r\n    const reactData2 = toJS(dataFilterdByYears);\r\n    const styles = {\r\n       divChart: {\r\n          width: '100%',\r\n          height: '60vh',\r\n       },\r\n    };\r\n    return (\r\n       <SmallCard2 styleType={2} header={`${t(casualtiesNames)} ${t('by-years')}`}>\r\n          <div style={styles.divChart}>\r\n             <ChartBar data={reactData2} fill=\"#FE9772\" dir={direction} />\r\n          </div>\r\n       </SmallCard2>\r\n    );\r\n });\r\n\r\n export default CardChartYears;\r\n ","import React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { useStore } from '../../stores/storeConfig';\r\nimport CardChartByGroup1 from './CardChartByGroup1';\r\nimport CardChartGrpBy2 from './CardChartGrpBy2';\r\nimport CardChartYears from './CardChartYears';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\ninterface IProps { }\r\n// const getSize = (width: number) => {\r\n//    let size: number = 500;\r\n//    if (width <= 350) size = 300;\r\n//    else if (width <= 770) size = width * 0.8;\r\n//    else if (width <= 1200) size = (width - 300) * 0.9;\r\n//    else size = 1000;\r\n//    return size;\r\n// };\r\n\r\nconst styles = {\r\n   divCharts: {\r\n     width:0,\r\n     minWidth: '100%',\r\n   },\r\n };\r\n\r\nexport const GroupByGraphsPanel: React.FC<IProps> = observer(() => {\r\n   const { filterStore } = useStore();\r\n   const { injuriesCount } = filterStore;\r\n   if (injuriesCount > 0 || true) {\r\n      return (\r\n         <div style={styles.divCharts}>           \r\n            <Row>\r\n               <Col md={4}>                  \r\n                  <CardChartYears />\r\n               </Col>\r\n               <Col md={8} >\r\n                  <CardChartByGroup1 />\r\n               </Col>\r\n            </Row>\r\n            <Row>\r\n               <Col md={12}>\r\n                  <CardChartGrpBy2 />\r\n               </Col>\r\n            </Row>\r\n         </div>\r\n      );\r\n   }\r\n   return null;\r\n});\r\n\r\nexport default GroupByGraphsPanel;"],"names":["observer","_ref","id","labelText","filterStore","useStore","groupByDict","updateGroupby","onSelectChange","useCallback","event","target","value","fixData","arrGroups","val","groupBy","_jsx","MySelect","onChange","label","data","valProp","contentProp","style","cssClass","t","useTranslation","group2Dict","updateGroupBy2","name","ChartJS","register","CategoryScale","LinearScale","BarElement","ArcElement","Title","Tooltip","Legend","ChartDataLabels","datalabelsOptions","anchor","align","textAlign","font","size","weight","options","responsive","maintainAspectRatio","indexAxis","plugins","legend","position","metaData","chartType","height","dir","fill","backgroundColor","getColorPallete","length","defColor","res","labels","map","item","_id","datasets","undefined","count","method","key","color","axis","chartData","Object","assign","datalabels","children","Bar","_Fragment","Pie","options1","uiStore","chartTypeList","updateChartType","_jsxs","Form","Group","controlId","Control","as","entries","x","SvgIconSettings","props","width","xmlns","viewBox","d","React","CardChartByGroup1","styles","divConfig","display","justifyContent","divChart","showModel","setShowModal","useState","dataFilterd","reactData","toJS","dataFormated","Number","isInteger","toFixed","direction","chart","ChartBar","useMemos","SmallCard2","marginBottom","SelectGroupBy","ConfigModal","title","showModal","setShow","ConfigChart","metaDAta","getBars","reactDataGrp2","dataGroupby2","flexWrap","SelectGroupBy2","dataFilterdByYears","casualtiesNames","reactData2","styleType","header","divCharts","minWidth","GroupByGraphsPanel","injuriesCount","Row","Col","md","CardChartYears","CardChartGrpBy2"],"sourceRoot":""}