{"version":3,"sources":["components/atoms/ButtonToggle.tsx","components/organisms/MyImageGallery.tsx"],"names":["ButtonToggle","condtion","textTrue","textFalse","width","onClick","t","useTranslation","style","Button","variant","styleCard","borderRadius","padding","margin","styleButCol","display","justifyContent","MyImageGallery","observer","type","useStore","imageStore","uiStore","getImages","setCurrImage","imageList","setCurrTag","isRTL","language","useEffect","arrayImagesProps","toJS","images","map","x","original","filename","thumbnail","originalTitle","titlehe","description","texthe","isGotImages","length","Card","Row","Col","md","SelectImageByTag","onChange","val","xs","ImageTitle","ButtonToggleHideDescription","items","onSlide","currentIndex","handleOnSlide","ImageMsg","styleButtonToggle","marginLeft","marginRight","marginBottom","hideDescription","toggleHideDescription","styleSelect","Form","Group","as","controlId","Control","e","target","value","styleTitle","textAlign","fontWeight","fontSize","currImage","isLoading"],"mappings":"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","file":"static/js/12.f35cfbc6.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\ninterface IProps {\r\n    condtion: boolean,\r\n    textTrue: string,\r\n    textFalse: string,\r\n    width?:number\r\n    onClick: () => void\r\n}\r\nconst ButtonToggle: React.FC<IProps> = ({\r\n  condtion, textTrue, textFalse, width=70, onClick,\r\n}) => {\r\n  const { t } = useTranslation();\r\n  const style = { width: `${width}px` };\r\n  return (\r\n    <Button\r\n      style={style}\r\n      variant=\"primary\"\r\n      onClick={() => { onClick(); }}\r\n    >\r\n      {condtion ? t(textTrue) : t(textFalse)}\r\n    </Button>\r\n  );\r\n};\r\nexport default ButtonToggle;\r\n","import React, { useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from 'mobx-react';\r\nimport { toJS } from 'mobx';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ImageGallery from 'react-image-gallery';\r\nimport 'react-image-gallery/styles/css/image-gallery.css';\r\nimport ButtonToggle from '../atoms/ButtonToggle';\r\nimport { useStore } from '../../stores/storeConfig';\r\n\r\ninterface Props {\r\n  type: string;\r\n}\r\nconst styleCard: React.CSSProperties = {\r\n  borderRadius: '5px',\r\n  padding: '5px',\r\n  margin: '7px',\r\n  width: '80%',\r\n};\r\nconst styleButCol: React.CSSProperties = {\r\n  display: 'flex',\r\n  justifyContent: 'flex-end',\r\n};\r\n\r\nconst MyImageGallery: React.FC<Props> = observer(({ type }) => {\r\n  const { imageStore, uiStore } = useStore();\r\n  const {\r\n    getImages, setCurrImage, imageList, setCurrTag,\r\n  } = imageStore;\r\n  const { language } = uiStore;\r\n  const isRTL = (language !== 'en');\r\n  useEffect(() => {\r\n    getImages(type);\r\n  }, [getImages, type]);\r\n  const arrayImagesProps = toJS(imageList);\r\n  const images = arrayImagesProps.map((x: any) => ({\r\n    original: x.filename,\r\n    thumbnail: x.filename,\r\n    originalTitle: x.titlehe,\r\n    description: x.texthe,\r\n  }));\r\n  const isGotImages = (images.length > 0);\r\n  const handleOnSlide = (currentIndex: number) => {\r\n    if (arrayImagesProps.length > 0) setCurrImage(arrayImagesProps[currentIndex]);\r\n    return true;\r\n  };\r\n  return (\r\n    <Card style={styleCard}>\r\n      <Row>\r\n        <Col md={2}>\r\n          <SelectImageByTag onChange={(val:string) => setCurrTag(val)} />\r\n        </Col>\r\n        <Col xs={12} md={8}>\r\n          {isGotImages && <ImageTitle />}\r\n        </Col>\r\n        <Col md={2} style={styleButCol}>\r\n          {isGotImages && <ButtonToggleHideDescription />}\r\n        </Col>\r\n      </Row>\r\n      {isGotImages && (\r\n        <ImageGallery\r\n          items={images}\r\n          isRTL={isRTL}\r\n          onSlide={(currentIndex: number) => handleOnSlide(currentIndex)}\r\n        />\r\n      )}\r\n      {!isGotImages && <ImageMsg />}\r\n    </Card>\r\n  );\r\n});\r\n\r\nconst styleButtonToggle = {\r\n  marginLeft: '3px',\r\n  marginRight: '3px',\r\n  marginBottom: '3px',\r\n};\r\nconst ButtonToggleHideDescription: React.FC<{}> = observer(() => {\r\n  const { imageStore } = useStore();\r\n  const { hideDescription, toggleHideDescription } = imageStore;\r\n  return (\r\n    <div style={styleButtonToggle}>\r\n      <ButtonToggle\r\n        condtion={hideDescription}\r\n        textTrue=\"show-description\"\r\n        textFalse=\"hide-description\"\r\n        onClick={toggleHideDescription}\r\n      />\r\n    </div>\r\n  );\r\n});\r\n\r\ninterface PropsSelectImageByTag {\r\n  onChange: (val:string) => void;\r\n}\r\nconst styleSelect = {\r\n  width: '150px',\r\n};\r\nconst SelectImageByTag: React.FC<PropsSelectImageByTag> = observer(({ onChange }) => (\r\n  <div>\r\n    <Form.Group as={Col} controlId=\"exampleForm.SelectTag\">\r\n      {/* <Form.Label>\r\n        tags\r\n      </Form.Label> */}\r\n      <Form.Control\r\n        as=\"select\"\r\n        style={styleSelect}\r\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) => { onChange(e.target.value); }}\r\n      >\r\n        <option>כללי</option>\r\n        <option>הולכי רגל</option>\r\n        <option>רוכבי אופניים</option>\r\n        <option>רוכבי אופנוע</option>\r\n        <option>מכוניות</option>\r\n        <option>אוטובוסים</option>\r\n        <option>ילדים</option>\r\n      </Form.Control>\r\n    </Form.Group>\r\n  </div>\r\n));\r\n\r\nconst styleTitle: React.CSSProperties = {\r\n  textAlign: 'center',\r\n  fontWeight: 700,\r\n  fontSize: 18,\r\n  margin: '10px',\r\n};\r\nconst ImageTitle: React.FC<{}> = observer(() => {\r\n  const { imageStore } = useStore();\r\n  const { currImage } = imageStore;\r\n  return (\r\n    <div style={styleTitle}>{currImage?.titlehe}</div>\r\n  );\r\n});\r\n\r\nconst ImageMsg: React.FC<{}> = observer(() => {\r\n  const { t } = useTranslation();\r\n  const { imageStore } = useStore();\r\n  const { isLoading } = imageStore;\r\n  return (\r\n    <span>{(isLoading) ? `${t('Loading…')}` : `${t('not-found-images')}`}</span>\r\n  );\r\n});\r\n\r\nexport default MyImageGallery;\r\n"],"sourceRoot":""}