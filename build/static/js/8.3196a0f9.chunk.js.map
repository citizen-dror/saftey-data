{"version":3,"sources":["components/molecules/MyBarChart.tsx","components/organisms/GroupByGraphsPanel.tsx"],"names":["MyBarChart","observer","data","bars","width","height","fill","legendType","t","useTranslation","colName","undefined","dataKey","name","map","x","aName","key","color","maxLabelLangth","reduce","maxval","currentValue","_id","length","xAxis","textAnchor","interval","angle","tick","fontSize","legend","layout","verticalAlign","align","style","direction","margin","top","right","left","bottom","strokeDasharray","getSize","GroupByGraphsPanel","useState","window","innerWidth","graphSize","setGraphSize","filterStore","useStore","dataByYears","dataFilterdByYears","dataFilterd","React","useEffect","handleResize","size","addEventListener","removeEventListener","graph1Size","Math","min","graph2Size","reactData1","toJS","reactData2","reactData3","barsGrp2","groupBy2","getBars","reactDataGrp2","dataGroupby2","className","marginLeft","marginRight","marginTop","SmallCard","styleType","title","SelectGroupBy","id","display","flexWrap","fontWeight","labelText","SelectGroupBy2"],"mappings":"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","file":"static/js/8.3196a0f9.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\r\n} from 'recharts';\r\nimport { observer } from \"mobx-react\"\r\nimport { useTranslation } from 'react-i18next';\r\n\r\n// const data = [\r\n//   { name: 'Page A', uv: 4000, pv: 2400, amt: 2400,},\r\n//   { name: 'Page B', uv: 3000, pv: 1398, amt: 2210,},\r\n//   { name: 'Page C', uv: 2000, pv: 9800, amt: 2290,},\r\n// ];\r\n\r\ninterface IProps {\r\n  data :readonly any[]\r\n  bars ?: any \r\n  width? : number\r\n  height? : number,\r\n  fill? : string, \r\n  legendType? : string\r\n}\r\n\r\nconst MyBarChart:React.FC<IProps>=  observer(({data,bars, width=390, height=350, fill=\"#8884d8\",legendType=\"null\"}) => {\r\n  const { t } = useTranslation();\r\n  let colName = t('Casualties');\r\n  if (bars === undefined){\r\n    bars = <Bar dataKey=\"count\" name={colName} fill={fill} />\r\n  }\r\n  else\r\n  {\r\n    bars = bars.map((x:any)=>{\r\n      let aName = t(x.key)\r\n      return(<Bar key={`bar-${x.key}`} dataKey={x.key} name={aName} fill={x.color}/>)\r\n    })\r\n  }\r\n  const maxLabelLangth = data.reduce(function(maxval,currentValue){\r\n    return (currentValue._id !== null && currentValue._id.length > maxval)? currentValue._id.length:maxval;\r\n  },0);\r\n  const xAxis = (data.length >5 || maxLabelLangth>9)? <XAxis dataKey=\"_id\" textAnchor=\"end\" interval={0} angle={-30} tick={{fontSize: 12}} />: <XAxis dataKey=\"_id\"/>\r\n  const legend = (legendType === \"null\" || width < 500) ? null :  <Legend layout=\"horizontal\" verticalAlign=\"top\" align=\"center\"/>\r\n  return (\r\n    <div style={{direction: \"ltr\"}}>\r\n    <BarChart\r\n      width={width}\r\n      height={height}\r\n      data={data}\r\n      margin={{\r\n        top: 5, right: 0, left: 0, bottom: 75,\r\n      }}\r\n    >\r\n      <CartesianGrid strokeDasharray=\"3 3\" />\r\n      {xAxis}\r\n      <YAxis />\r\n      <Tooltip />\r\n      {legend}\r\n      {bars}\r\n      {/* <Bar dataKey=\"uv\" fill=\"#82ca9d\" /> */}\r\n    </BarChart>\r\n    </div>\r\n  );\r\n})\r\n\r\nexport default MyBarChart\r\n","import React, { useState } from 'react'\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from \"mobx-react\"\r\nimport { toJS } from 'mobx'\r\nimport { useStore } from '../../stores/storeConfig'\r\nimport { SmallCard } from '../atoms/SmallCard'\r\nimport { SelectGroupBy } from '../atoms/SelectGroupBy'\r\nimport { SelectGroupBy2 } from '../atoms/SelectGroupBy2'\r\n// import { RangeSlider } from '../atoms/RangeSlider'\r\nimport MyBarChart from '../molecules/MyBarChart'\r\n\r\ninterface IProps { }\r\nconst getSize = (width: number) => {\r\n    let size: number = 500;\r\n    if (width <= 350)\r\n        size = 300;\r\n    else if (width <= 760)\r\n        size = width * 0.85;\r\n    else if (width <= 1500)\r\n        size = width * 0.75;\r\n    else\r\n        size = 1200;\r\n    return size;\r\n}\r\n\r\nexport const GroupByGraphsPanel: React.FC<IProps> = observer(() => {\r\n    const { t } = useTranslation();\r\n    const [graphSize, setGraphSize] = useState(getSize(window.innerWidth));\r\n    const style = {\r\n        marginLeft: \"0\",\r\n        marginRight: \"0\",\r\n        marginTop: \"20px\"\r\n    };\r\n    const styleLable = {\r\n        fontWeight: 700,\r\n        marginTop: \"5px\",\r\n        marginLeft: \"20px\",\r\n        marginRight: \"20px\"\r\n    };\r\n    const divConstolsRow = {\r\n        display: \"flex\",\r\n        flexWrap: \"wrap\"\r\n    } as React.CSSProperties;\r\n    const { filterStore } = useStore();\r\n    const { dataByYears, dataFilterdByYears, dataFilterd } = filterStore;\r\n    React.useEffect(() => {\r\n        function handleResize() {\r\n            const size = getSize(window.innerWidth)\r\n            setGraphSize(size)\r\n        }\r\n        window.addEventListener('resize', handleResize)\r\n        return (() => { window.removeEventListener('resize', handleResize) })\r\n    })\r\n    let graph1Size = Math.min(380, graphSize)\r\n    let graph2Size = Math.min(600, graphSize)\r\n    //let width = window.innerWidth|| document.documentElement.clientWidth|| document.body.clientWidth;  \r\n    let reactData1 = toJS(dataByYears)\r\n    let reactData2 = toJS(dataFilterdByYears)\r\n    let reactData3 = toJS(dataFilterd)\r\n    let barsGrp2 = filterStore.groupBy2.getBars();\r\n    let reactDataGrp2 = toJS(filterStore.dataGroupby2)\r\n    if (reactData1.length > 0) {\r\n        return (\r\n            <div className=\"row\" style={style}>\r\n                <SmallCard styleType={2} title={t('CasualtiesByFilter')}>\r\n                    <MyBarChart data={reactData2} width={graph1Size} fill=\"#FE9772\" />\r\n                </SmallCard>\r\n                <SmallCard styleType={3}>\r\n                    <SelectGroupBy id=\"Graphs.Main\" />\r\n                    <MyBarChart data={reactData3} width={graph2Size} height={graph2Size * 0.65}></MyBarChart>\r\n                </SmallCard>\r\n                <SmallCard width={graphSize + 150}>\r\n                    <div style={divConstolsRow}>\r\n                        <span style={styleLable}> {t('GroupBy')}:</span>\r\n                        <SelectGroupBy id=\"Graphs.Grp2\" labelText='' />\r\n                        <SelectGroupBy2 id=\"Graphs\" />\r\n                        {/* <RangeSlider id=\"Graphs\" label=\"resize\" value={80} onChange={onSizeSliderChange}/> */}\r\n                    </div>\r\n                    <MyBarChart data={reactDataGrp2} bars={barsGrp2} width={graphSize} height={graphSize * 0.62} legendType=\"top\"></MyBarChart>\r\n                </SmallCard>\r\n            </div>\r\n        )\r\n    }\r\n    else return null;\r\n})\r\nexport default GroupByGraphsPanel\r\n    // const onSizeSliderChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    //     let size:number = parseInt(event.target.value)\r\n    //     switch(true) {\r\n    //         case (size <= 25):\r\n    //             size= 300;\r\n    //             break;\r\n    //         case (size <= 50):\r\n    //             size= 500;\r\n    //           break;\r\n    //         case (size <= 75):\r\n    //             size= 800;\r\n    //           break;\r\n    //         case (size <= 100):\r\n    //             size= 1200;\r\n    //           break;\r\n    //         default:\r\n    //             size= 500;\r\n    //       }\r\n    //     setGraphSize(size) \r\n    //   };\r\n\r\n// function debounce(fn:()=>void, ms:any ) {\r\n//     let timer :any\r\n//     return _ => {\r\n//       clearTimeout(timer)\r\n//       timer = setTimeout(_ => {\r\n//         timer = null\r\n//         fn.apply(this , arguments)\r\n//       }, ms)\r\n//     };\r\n//   }"],"sourceRoot":""}