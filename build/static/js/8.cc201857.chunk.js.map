{"version":3,"sources":["components/atoms/SmallCard.tsx","components/atoms/SelectGroupBy.tsx","components/atoms/SelectGroupBy2.tsx","components/molecules/GroupByTable.tsx","components/organisms/GroupByTablesPanel.tsx"],"names":["SmallCard","title","styleType","width","children","styleCard","borderRadius","padding","margin","aHeder","Header","style","SelectGroupBy","observer","id","labelText","t","useTranslation","filterStore","useStore","groupByDict","groupBy","updateGroupby","lable","Label","className","onSelectChange","useCallback","event","target","value","Group","controlId","Control","as","text","onChange","Object","entries","map","key","x","SelectGroupBy2","group2Dict","groupBy2","updateGroupBy2","GroupByTable","dataName","columns","data","undefined","dataField","keyField","headerClasses","GroupByTablesPanel","marginLeft","marginRight","marginTop","GroupTablesYears","GroupTablesYears2","GroupTablesFilter","GroupTables2Grp","dataByYears","reactData1","toJS","length","dataFilterdByYears","reactData2","dataFilterd","reactData","dataGroupby2","columnsGrp2","getColumns","reactDataGrp2","display","flexWrap","fontWeight"],"mappings":"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","file":"static/js/8.cc201857.chunk.js","sourcesContent":["import React from 'react'\r\nimport Card from 'react-bootstrap/Card';\r\n\r\ninterface IProps {\r\n    title?: string,\r\n    styleType?: number\r\n    width?: number\r\n}\r\nexport const SmallCard: React.FC<IProps> = ({ title, styleType = 0, width = 0, children }) => {\r\n    const styleWidth: any[] = [\r\n        '15rem', '20rem', '25rem', '40rem'\r\n    ];\r\n    let styleCard: any =\r\n    {\r\n        borderRadius: '5px',\r\n        padding: '5px',\r\n        margin: '7px'\r\n    };\r\n    let aHeder = title ? <Card.Header>{title}</Card.Header> : \"\";\r\n    if (width > 0)\r\n        styleCard.width = width\r\n    else\r\n        styleCard.width = styleWidth[styleType]\r\n    return (\r\n        <Card style={styleCard}>\r\n            {aHeder}\r\n            {children}\r\n        </Card>\r\n    )\r\n}","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from \"mobx-react\"\r\nimport Form from 'react-bootstrap/Form';\r\nimport { useStore } from '../../stores/storeConfig'\r\n\r\ninterface IProps {\r\n    id: string,\r\n    labelText?: string,\r\n}\r\nexport const SelectGroupBy: React.FC<IProps> = observer(({ id, labelText = 'GroupBy' }) => {\r\n    const { t } = useTranslation();\r\n    const { filterStore } = useStore();\r\n    const { groupByDict, groupBy, updateGroupby } = filterStore;\r\n    const lable = (labelText !== '') ? <Form.Label className=\"filterLable\"> {t(labelText)}:</Form.Label> : null;\r\n    const onSelectChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\r\n        updateGroupby(event.target.value)\r\n    }, [updateGroupby]);\r\n\r\n    return (\r\n        <Form className=\"form-inline\">\r\n            <Form.Group controlId={`GrupForm.${id}.SelectGroupBy`}>\r\n                {lable}\r\n                <Form.Control as=\"select\" value={groupBy.text}\r\n                    onChange={onSelectChange}\r\n                >\r\n                    {Object.entries(groupByDict).map(([key, x]: any[]) => {\r\n                        return (<option value={x.text} key={key}>{t(x.text)}</option>)\r\n                    })}\r\n                </Form.Control>\r\n            </Form.Group>\r\n        </Form>\r\n    )\r\n})","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from \"mobx-react\"\r\nimport Form from 'react-bootstrap/Form';\r\nimport { useStore } from '../../stores/storeConfig'\r\n\r\n\r\ninterface IProps { id: string }\r\n\r\nexport const SelectGroupBy2: React.FC<IProps> = observer(({ id }) => {\r\n    const { t } = useTranslation();\r\n    const { filterStore } = useStore();\r\n    const { group2Dict, groupBy2, updateGroupBy2 } = filterStore;\r\n    const onSelectChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\r\n        updateGroupBy2(event.target.value)\r\n    }, [updateGroupBy2]);\r\n    return (\r\n        <Form className=\"form-inline\">\r\n            <Form.Group controlId={`GrupForm.${id}.SelectGroupBy2`}>\r\n                {/* <Form.Label className=\"filterLable\"> {t('GroupBy')}:</Form.Label> */}\r\n                <Form.Control as=\"select\" value={groupBy2.text}\r\n                    onChange={onSelectChange}\r\n                >\r\n                    {Object.entries(group2Dict).map(([key, x]: any[]) => {\r\n                        return (<option value={x.text} key={key}>{t(x.text)}</option>)\r\n                    })}\r\n                </Form.Control>\r\n            </Form.Group>\r\n        </Form>\r\n    )\r\n})","\r\nimport React ,{ FunctionComponent } from 'react'\r\nimport { useTranslation } from 'react-i18next';\r\n//import { observer } from \"mobx-react\"\r\n// @ts-ignore\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css'\r\n\r\ninterface IProps {\r\n    dataName?:string\r\n    data: any[]\r\n    columns? :any[]\r\n  }\r\n export const GroupByTable:FunctionComponent<IProps> = ({dataName='Year', columns ,data}) => {\r\n    const { t } = useTranslation();\r\n    if (columns === undefined)\r\n    {\r\n        columns = [{\r\n            dataField: '_id',\r\n            text: t(dataName),\r\n        }, {\r\n            dataField: 'count',\r\n            text: t('Casualties'),\r\n        }];\r\n    }\r\n    if (data!= null ){\r\n        return (<div className=\"groupByTable\">\r\n            <BootstrapTable keyField='_id' data={data} columns={columns} headerClasses=\"table-header\" />\r\n            </div>\r\n            )\r\n    }\r\n    else return null;\r\n}\r\n//export default GroupByTable;","import React, { FunctionComponent } from 'react'\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from \"mobx-react\"\r\nimport { toJS } from 'mobx'\r\nimport { useStore } from '../../stores/storeConfig'\r\nimport { GroupByTable } from '../molecules/GroupByTable'\r\nimport { SmallCard } from '../atoms/SmallCard'\r\nimport { SelectGroupBy } from '../atoms/SelectGroupBy'\r\nimport { SelectGroupBy2 } from '../atoms/SelectGroupBy2'\r\n\r\ninterface IProps { }\r\nexport const GroupByTablesPanel: FunctionComponent<IProps> = () => {\r\n    const style = {\r\n        marginLeft: \"0\",\r\n        marginRight: \"0\",\r\n        marginTop: \"20px\"\r\n    };\r\n    return (\r\n        <div className=\"row\" style={style}>\r\n            <GroupTablesYears />\r\n            <GroupTablesYears2 />\r\n            <GroupTablesFilter />\r\n            <GroupTables2Grp/>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nconst GroupTablesYears: FunctionComponent<IProps> = observer(() => {\r\n    const { t } = useTranslation();\r\n    const { filterStore } = useStore();\r\n    const { dataByYears } = filterStore;\r\n    let reactData1 = toJS(dataByYears);\r\n    if (reactData1.length > 0) {\r\n        return (\r\n            <SmallCard title={t('AllCasualtiesInRegion')}>\r\n                <GroupByTable data={reactData1} />\r\n            </SmallCard>\r\n        )\r\n    }\r\n    else return null;\r\n});\r\nconst GroupTablesYears2: FunctionComponent<IProps> = observer(() => {\r\n    const { t } = useTranslation();\r\n    const { filterStore } = useStore();\r\n    const { dataFilterdByYears } = filterStore;\r\n    let reactData2 = toJS(dataFilterdByYears);\r\n    if (reactData2.length > 0) {\r\n        return (\r\n            <SmallCard title={t('CasualtiesByFilter')}>\r\n                <GroupByTable data={reactData2} />\r\n            </SmallCard>\r\n        )\r\n    }\r\n    else return null;\r\n});\r\nconst GroupTablesFilter: FunctionComponent<IProps> = observer(() => {\r\n    const { filterStore } = useStore();\r\n    const { dataFilterd , groupBy} = filterStore;\r\n    const reactData = toJS(dataFilterd)\r\n    if (reactData.length > 0) {\r\n        return (\r\n            <SmallCard styleType={1}>\r\n                <SelectGroupBy id=\"Tables.Main\" />\r\n                <GroupByTable data={reactData} dataName={groupBy.text} />\r\n            </SmallCard>\r\n        )\r\n    }\r\n    else return null;\r\n});\r\n\r\nconst GroupTables2Grp: FunctionComponent<IProps> = observer(() => {\r\n    const divStyle = {\r\n        display: \"flex\",\r\n        flexWrap: \"wrap\"\r\n    } as React.CSSProperties;\r\n    const styleLable = {\r\n        fontWeight: 700,\r\n        marginTop: \"5px\",\r\n        marginLeft: \"20px\",\r\n        marginRight: \"20px\"\r\n    };\r\n    const { t } = useTranslation();\r\n    const { filterStore } = useStore();\r\n    const { groupBy, groupBy2, dataGroupby2} = filterStore;\r\n    const columnsGrp2 = groupBy2.getColumns().map((x) => { return ({ dataField: x, text: t(x) }) })\r\n    const reactDataGrp2 = toJS(dataGroupby2)\r\n    if (reactDataGrp2.length > 0) {\r\n        return (\r\n            <SmallCard styleType={4}>\r\n                <div style={divStyle}>\r\n                    <span style={styleLable}> {t('GroupBy')}:</span>\r\n                    <SelectGroupBy id=\"Tables.Grp2\" labelText='' />\r\n                    <SelectGroupBy2 id=\"Tables\" /></div>\r\n                <GroupByTable data={reactDataGrp2} dataName={groupBy.text} columns={columnsGrp2} />\r\n            </SmallCard>\r\n        )\r\n    }\r\n    else return null;\r\n});\r\nexport default GroupByTablesPanel"],"sourceRoot":""}