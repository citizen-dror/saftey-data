{"version":3,"sources":["components/atoms/ButtonToggle.tsx","components/atoms/Select.tsx","components/organisms/MyImageGallery.tsx"],"names":["ButtonToggle","condtion","textTrue","textFalse","disabled","onClick","style","t","useTranslation","className","variant","styleSelect","width","Select","label","id","data","value","onChange","opttions","map","x","index","val","text","Group","as","Col","controlId","Label","Control","e","target","styles","divImageGallery","minWidth","styleCol","display","justifyContent","MyImageGallery","observer","type","useStore","imageStore","uiStore","getImages","setCurrImage","imageList","tagsArr","setCurrTag","currTag","language","isRTL","useEffect","titleKey","destkey","arrayImagesProps","toJS","images","original","filename","thumbnail","originalTitle","description","isGotImages","length","md","xs","ImageTitle","ButtonToggleHideDescription","items","onSlide","currentIndex","handleOnSlide","ImageMsg","styleButtonToggle","hideDescription","toggleHideDescription","styleTitle","textAlign","fontWeight","fontSize","margin","currImage","title","isLoading"],"mappings":"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","file":"static/js/10.0a621342.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\ninterface IProps {\r\n  condtion: boolean,\r\n  textTrue: string,\r\n  textFalse: string,\r\n  disabled?: boolean,\r\n  style?: any,\r\n  onClick: () => void\r\n}\r\nconst ButtonToggle: React.FC<IProps> = ({\r\n  condtion, textTrue, textFalse, disabled = false ,onClick,style\r\n} : IProps) => {\r\n  const { t } = useTranslation();\r\n  return (\r\n    <Button\r\n      className=\"btn-sm\"\r\n      variant=\"primary\"\r\n      disabled = {disabled}\r\n      onClick={() => { onClick(); }}\r\n      style={{...style}}\r\n    >\r\n      {condtion ? t(textTrue) : t(textFalse)}\r\n    </Button>\r\n  );\r\n};\r\nexport default ButtonToggle;\r\n","import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\ninterface IProps {\r\n  label?: string;\r\n  id: string;\r\n  data: any[];\r\n  value: string;\r\n  onChange: (val: string) => void;\r\n}\r\nconst styleSelect = {\r\n  width: '150px',\r\n};\r\n\r\nconst Select: React.FC<IProps> = ({ label, id, data, value, onChange }) => {\r\n  const { t } = useTranslation();\r\n  const opttions = data.map((x: any, index) => <option value={x.val} key={index}>{t(x.text)}</option>)\r\n  return (\r\n    <div>\r\n      <Form.Group as={Col} controlId={id}>\r\n        {label && <Form.Label className=\"selectLabel\">\r\n          {t(label)}:\r\n        </Form.Label>}\r\n        <Form.Control\r\n          as=\"select\"\r\n          className=\"form-select form-select-sm\"\r\n          style={styleSelect}\r\n          value={value}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => { onChange(e.target.value); }}\r\n        >\r\n          {opttions}\r\n        </Form.Control>\r\n      </Form.Group>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Select;\r\n","import React, { useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from 'mobx-react';\r\nimport { toJS } from 'mobx';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ImageGallery from 'react-image-gallery';\r\nimport 'react-image-gallery/styles/css/image-gallery.css';\r\nimport ButtonToggle from '../atoms/ButtonToggle';\r\nimport Select from '../atoms/Select';\r\nimport { useStore } from '../../stores/storeConfig';\r\nimport SmallCard2 from '../atoms/SmallCard2';\r\n\r\ninterface Props {\r\n  type: string;\r\n}\r\n\r\nconst styles = {\r\n  divImageGallery: {\r\n    width:0,\r\n    minWidth: '100%',\r\n  },\r\n  styleCol: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n  }\r\n};\r\n\r\n// const styleCard: React.CSSProperties = {\r\n//   borderRadius: '5px',\r\n//   padding: '5px',\r\n//   margin: '7px',\r\n//   width: '80%',\r\n// };\r\n\r\nconst MyImageGallery: React.FC<Props> = observer(({ type }) => {\r\n  const { imageStore, uiStore } = useStore();\r\n  const {\r\n    getImages, setCurrImage, imageList, tagsArr, setCurrTag, currTag,\r\n  } = imageStore;\r\n  const { language } = uiStore;\r\n  const isRTL = (language !== 'en');\r\n  useEffect(() => {\r\n    getImages(type);\r\n  }, [getImages, type]);\r\n  const titleKey = `title${language}`;\r\n  const destkey = `text${language}`;\r\n  const arrayImagesProps = toJS(imageList);\r\n  const images = arrayImagesProps.map((x: any) => ({\r\n    original: '/api/v1/img/' + x.filename,\r\n    thumbnail: '/api/v1/img/' + x.filename,\r\n    originalTitle: x[titleKey],\r\n    description: x[destkey],\r\n  }));\r\n  const isGotImages = (images.length > 0);\r\n  const handleOnSlide = (currentIndex: number) => {\r\n    if (arrayImagesProps.length > 0) setCurrImage(arrayImagesProps[currentIndex]);\r\n    return true;\r\n  };\r\n\r\n  return (\r\n    <SmallCard2>\r\n      <div style={styles.divImageGallery}>\r\n      <Row >\r\n        <Col md={3} style={styles.styleCol}>\r\n          <Select\r\n            id='exampleForm.SelectTag'\r\n            value={currTag}\r\n            data={tagsArr}\r\n            onChange={(val: string) => setCurrTag(val)}\r\n          />\r\n          {/* <SelectImageByTag onChange={(val: string) => setCurrTag(val)} /> */}\r\n        </Col>\r\n        <Col xs={12} md={6}>\r\n          {isGotImages && <ImageTitle />}\r\n        </Col>\r\n        <Col md={3} style={styles.styleCol}>\r\n          {isGotImages && <ButtonToggleHideDescription />}\r\n        </Col>\r\n      </Row>\r\n      <hr />\r\n      {isGotImages && (\r\n        <ImageGallery\r\n          items={images}\r\n          isRTL={isRTL}\r\n          onSlide={(currentIndex: number) => handleOnSlide(currentIndex)}\r\n        />\r\n      )}\r\n      {!isGotImages && <ImageMsg />}\r\n      </div>\r\n    </SmallCard2>\r\n  );\r\n});\r\n\r\nconst styleButtonToggle = {\r\n  width: 'auto'\r\n};\r\nconst ButtonToggleHideDescription: React.FC<{}> = observer(() => {\r\n  const { imageStore } = useStore();\r\n  const { hideDescription, toggleHideDescription } = imageStore;\r\n  return (\r\n    <div style={styleButtonToggle}>\r\n      <ButtonToggle\r\n        condtion={hideDescription}\r\n        textTrue=\"show-description\"\r\n        textFalse=\"hide-description\"\r\n        onClick={toggleHideDescription}\r\n      />\r\n    </div>\r\n  );\r\n});\r\n\r\nconst styleTitle: React.CSSProperties = {\r\n  textAlign: 'center',\r\n  fontWeight: 700,\r\n  fontSize: 18,\r\n  margin: '10px',\r\n};\r\nconst ImageTitle: React.FC<{}> = observer(() => {\r\n  const { imageStore, uiStore } = useStore();\r\n  const { currImage } = imageStore;\r\n  const { language } = uiStore;\r\n  const titleKey = `title${language}`;\r\n  // @ts-ignore\r\n  const title: string = (currImage !== null) ? currImage[titleKey] : '';\r\n  return (\r\n    <div style={styleTitle}>{title}</div>\r\n  );\r\n});\r\n\r\nconst ImageMsg: React.FC<{}> = observer(() => {\r\n  const { t } = useTranslation();\r\n  const { imageStore } = useStore();\r\n  const { isLoading } = imageStore;\r\n  return (\r\n    <span>{(isLoading) ? `${t('Loading')}` : `${t('not-found-images')}`}</span>\r\n  );\r\n});\r\n\r\nexport default MyImageGallery;\r\n"],"sourceRoot":""}