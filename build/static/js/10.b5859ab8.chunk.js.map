{"version":3,"sources":["components/atoms/CasualtiesSumLabel.tsx","components/organisms/AccidentsTable.tsx"],"names":["CasualtiesSumLabel","length","name","t","useTranslation","nameSpan","AccidentsTable","observer","props","filterStore","useStore","divStyle","display","justifyContent","reactMarkers","toJS","dataAllInjuries","ExportCSVButton","CSVExport","useState","getColumnsByWidth","window","innerWidth","columns","setColumns","React","useEffect","handleResize","cols","addEventListener","removeEventListener","cityResult","keyField","data","exportCSV","baseProps","pagination","paginationFactory","headerClasses","style","className","csvProps","width","columns1","dataField","text","hidden","sort","colCity","colStreet","columns3","columns4","splice","concat"],"mappings":"kNAQaA,G,cAAuC,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,OAAOC,EAAU,EAAVA,KACjDC,EAAMC,cAAND,EACFE,EAAWH,EAAOA,EAAM,KAAO,GACrC,OAAID,EAAS,EAET,4BAAKI,EAAUF,EAAE,SAAjB,IAA4BF,EAA5B,IAAqCE,EAAE,cAAvC,KAIA,4BAAKA,EAAE,qB,uDCDR,IAAMG,EAAiBC,aAAS,SAACC,GAAmB,IAC/CC,EAAgBC,cAAhBD,YACAN,EAAMC,cAAND,EACFQ,EAAW,CACbC,QAAS,OACTC,eAAgB,YAEdC,EAAeC,YAAKN,EAAYO,iBAC9BC,EAAoBC,YAApBD,gBAR8C,EASxBE,mBAASC,EAAkBC,OAAOC,WAAYnB,IATtB,mBAS/CoB,EAT+C,KAStCC,EATsC,KAkBtD,OARAC,IAAMC,WAAU,WACZ,SAASC,IACL,IAAMC,EAAOR,EAAkBC,OAAOC,WAAYnB,GAClDqB,EAAWI,GAGf,OADAP,OAAOQ,iBAAiB,SAAUF,GAC1B,WAAQN,OAAOS,oBAAoB,SAAUH,OAErDb,EAAab,OAAS,EACd,6BACJ,kBAAC,EAAD,CAAoBA,OAAQa,EAAab,OAAQC,KAAMO,EAAYsB,aACnE,kBAAC,IAAD,CACIC,SAAS,KACTC,KAAMnB,EACNS,QAASA,EACTW,WAAS,IAGL,SAAC1B,GAAD,OACI,6BACI,kBAAC,IAAD,iBAAoBA,EAAM2B,UAA1B,CAAqCC,WAAYC,MAAqBC,cAAc,kBACpF,6BACA,yBAAKC,MAAO5B,GACR,kBAACM,EAAD,eAAiBuB,UAAU,aAAgBhC,EAAMiC,UAAWtC,EAAE,wBAUtF,kBAAC,EAAD,CAAoBF,OAAQa,EAAab,OAAQC,KAAMO,EAAYsB,gBAKrEX,GAFSd,YAEW,SAACoC,EAAevC,GACtC,IAAMwC,EAAW,CAAC,CACdC,UAAW,MACXC,KAAM,KACNC,QAAQ,GACT,CACCF,UAAW,gBACXC,KAAM1C,EAAE,QACR4C,MAAM,GACP,CACCH,UAAW,yBACXC,KAAM1C,EAAE,YACR4C,MAAM,GACP,CACCH,UAAW,sBACXC,KAAM1C,EAAE,eACR4C,MAAM,IAEJC,EAAU,CACZJ,UAAW,uBACXC,KAAM1C,EAAE,QACR4C,MAAM,GAEJE,EAAY,CACdL,UAAW,iBACXC,KAAM1C,EAAE,UACR4C,MAAM,GAEJG,EAAW,CAAC,CACdN,UAAW,8BACXC,KAAM1C,EAAE,WACR4C,MAAM,GACP,CACCH,UAAW,uBACXC,KAAM1C,EAAE,gBACR4C,MAAM,IAEJI,EAAW,CAAC,CACdP,UAAW,mBACXC,KAAM1C,EAAE,OACR4C,MAAM,GACP,CACCH,UAAW,aACXC,KAAM1C,EAAE,UACR4C,MAAM,IAGNxB,EAAUoB,EAQd,OAPID,EAAQ,KACRnB,EAAQ6B,OAAO,EAAG,EAAGJ,GACrBN,EAAQ,KACRnB,EAAQ6B,OAAO,EAAG,EAAGH,GACrBP,EAAQ,MACRnB,EAAUA,EAAQ8B,OAAOH,IAC7B3B,EAAUA,EAAQ8B,OAAOF","file":"static/js/10.b5859ab8.chunk.js","sourcesContent":["\r\nimport React from 'react'\r\nimport { useTranslation } from 'react-i18next';\r\n\r\ninterface IProps {\r\n    length:number,\r\n    name?: string\r\n  }\r\nexport const CasualtiesSumLabel: React.FC<IProps> = ({length,name}) => {\r\n    const { t } = useTranslation();\r\n    const nameSpan = name ? name +\"- \" : \"\" \r\n    if (length > 0) {\r\n        return (\r\n        <h4>{nameSpan}{t('Found')} {length} {t('Casualties')} </h4>\r\n        )\r\n    }\r\n    else return (\r\n        <h4>{t('NoResultsFound')}</h4>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useTranslation } from 'react-i18next';\r\nimport { toJS } from 'mobx'\r\nimport { observer } from \"mobx-react\"\r\n// @ts-ignore\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\n// @ts-ignore\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\n// @ts-ignore\r\nimport ToolkitProvider, { CSVExport } from 'react-bootstrap-table2-toolkit';\r\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css'\r\nimport 'react-bootstrap-table2-toolkit/dist/react-bootstrap-table2-toolkit.min.css';\r\nimport { CasualtiesSumLabel } from '../atoms/CasualtiesSumLabel'\r\nimport { useStore } from '../../stores/storeConfig'\r\n\r\ninterface IProps { }\r\nexport const AccidentsTable = observer((props: IProps) => {\r\n    const { filterStore } = useStore();\r\n    const { t } = useTranslation();\r\n    const divStyle = {\r\n        display: 'flex',\r\n        justifyContent: 'flex-end'\r\n    };\r\n    const reactMarkers = toJS(filterStore.dataAllInjuries)\r\n    const { ExportCSVButton } = CSVExport;\r\n    const [columns, setColumns] = useState(getColumnsByWidth(window.innerWidth, t));\r\n    React.useEffect(() => {\r\n        function handleResize() {\r\n            const cols = getColumnsByWidth(window.innerWidth, t);\r\n            setColumns(cols)\r\n        }\r\n        window.addEventListener('resize', handleResize)\r\n        return (() => { window.removeEventListener('resize', handleResize) })\r\n    })\r\n    if (reactMarkers.length > 0) {\r\n        return (<div>\r\n            <CasualtiesSumLabel length={reactMarkers.length} name={filterStore.cityResult} />\r\n            <ToolkitProvider\r\n                keyField=\"id\"\r\n                data={reactMarkers}\r\n                columns={columns}\r\n                exportCSV\r\n            >\r\n                {\r\n                    (props: any) => (\r\n                        <div>\r\n                            <BootstrapTable {...props.baseProps} pagination={paginationFactory()} headerClasses=\"table-header\" />\r\n                            <hr />\r\n                            <div style={divStyle}>\r\n                                <ExportCSVButton className=\"button-sm\" {...props.csvProps}>{t('export-to-csv')}</ExportCSVButton>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }\r\n            </ToolkitProvider>\r\n        </div>\r\n        )\r\n    }\r\n    else return (\r\n        <CasualtiesSumLabel length={reactMarkers.length} name={filterStore.cityResult} />\r\n    );\r\n})\r\nexport default AccidentsTable\r\n\r\nconst getColumnsByWidth = (width: number, t: any) => {\r\n    const columns1 = [{\r\n        dataField: '_id',\r\n        text: 'ID',\r\n        hidden: true\r\n    }, {\r\n        dataField: 'accident_year',\r\n        text: t('Year'),\r\n        sort: true\r\n    }, {\r\n        dataField: 'injury_severity_hebrew',\r\n        text: t('Severity'),\r\n        sort: true\r\n    }, {\r\n        dataField: 'injured_type_hebrew',\r\n        text: t('TypeInjured'),\r\n        sort: true\r\n    }];\r\n    const colCity = {\r\n        dataField: 'accident_yishuv_name',\r\n        text: t('City'),\r\n        sort: true\r\n    };\r\n    const colStreet = {\r\n        dataField: 'street1_hebrew',\r\n        text: t('Street'),\r\n        sort: true\r\n    };\r\n    const columns3 = [{\r\n        dataField: 'vehicle_vehicle_type_hebrew',\r\n        text: t('Vehicle'),\r\n        sort: true\r\n    }, {\r\n        dataField: 'accident_type_hebrew',\r\n        text: t('AccidentType'),\r\n        sort: true\r\n    }];\r\n    const columns4 = [{\r\n        dataField: 'age_group_hebrew',\r\n        text: t('Age'),\r\n        sort: true\r\n    }, {\r\n        dataField: 'sex_hebrew',\r\n        text: t('Gender'),\r\n        sort: true\r\n    }];\r\n\r\n    let columns = columns1;\r\n    if (width > 500)\r\n        columns.splice(2, 0, colCity);\r\n    if (width > 700)\r\n        columns.splice(3, 0, colStreet);\r\n    if (width > 900)\r\n        columns = columns.concat(columns3);\r\n    columns = columns.concat(columns4);\r\n    return columns;\r\n}"],"sourceRoot":""}