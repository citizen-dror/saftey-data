{"version":3,"sources":["components/atoms/SmallCard.tsx","components/atoms/SelectGroupBy.tsx","components/atoms/SelectGroupBy2.tsx","components/molecules/GroupByTable.tsx","components/organisms/GroupByTablesPanel.tsx"],"names":["SmallCard","title","styleType","width","children","styleCard","borderRadius","padding","margin","aHeder","Header","style","SelectGroupBy","observer","id","labelText","t","useTranslation","filterStore","useStore","groupByDict","groupBy","updateGroupby","lable","Label","className","onSelectChange","useCallback","event","target","value","Group","controlId","Control","as","text","onChange","Object","entries","map","key","x","SelectGroupBy2","group2Dict","groupBy2","updateGroupBy2","GroupByTable","dataName","columns","data","data1","undefined","count","Number","isInteger","_id","toFixed","foramtDataPrecision","reactColumns","dataField","keyField","headerClasses","GroupByTablesPanel","marginLeft","marginRight","marginTop","GroupTablesYears","GroupTablesYears2","GroupTablesFilter","GroupTables2Grp","dataByYears","casualtiesNames","reactData1","toJS","length","dataFilterdByYears","reactData2","dataFilterd","reactData","dataGroupby2","columnsGrp2","getColumns","reactDataGrp2","show","display","flexWrap","fontWeight"],"mappings":"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","file":"static/js/10.7a45d417.chunk.js","sourcesContent":["import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\ninterface IProps {\r\n    title?: string,\r\n    styleType?: number\r\n    width?: number\r\n}\r\nconst SmallCard: React.FC<IProps> = ({\r\n  title, styleType = 0, width = 0, children,\r\n}) => {\r\n  const styleWidth: any[] = [\r\n    '15rem', '20rem', '25rem', '40rem',\r\n  ];\r\n  const styleCard: any = {\r\n    borderRadius: '5px',\r\n    padding: '5px',\r\n    margin: '7px',\r\n  };\r\n  const aHeder = title ? <Card.Header>{title}</Card.Header> : '';\r\n  if (width > 0) styleCard.width = width;\r\n  else styleCard.width = styleWidth[styleType];\r\n  return (\r\n    <Card style={styleCard}>\r\n      {aHeder}\r\n      {children}\r\n    </Card>\r\n  );\r\n};\r\nexport default SmallCard;\r\n","import React, { ChangeEvent, useCallback } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from 'mobx-react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { useStore } from '../../stores/storeConfig';\r\n\r\ninterface IProps {\r\n    id: string,\r\n    labelText?: string,\r\n}\r\nconst SelectGroupBy: React.FC<IProps> = observer(({ id, labelText = 'GroupBy' }) => {\r\n  const { t } = useTranslation();\r\n  const { filterStore } = useStore();\r\n  const { groupByDict, groupBy, updateGroupby } = filterStore;\r\n  const lable = (labelText !== '') ? (\r\n    <Form.Label className=\"filterLable\">\r\n      {' '}\r\n      {t(labelText)}\r\n:\r\n    </Form.Label>\r\n  ) : null;\r\n  const onSelectChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\r\n    updateGroupby(event.target.value);\r\n  }, [updateGroupby]);\r\n\r\n  return (\r\n    <Form className=\"form-inline\">\r\n      <Form.Group controlId={`GrupForm.${id}.SelectGroupBy`}>\r\n        {lable}\r\n        <Form.Control\r\n          as=\"select\"\r\n          value={groupBy.text}\r\n          onChange={onSelectChange}\r\n        >\r\n          {Object.entries(groupByDict).map(([key, x]: any[]) => (<option value={x.text} key={key}>{t(x.text)}</option>))}\r\n        </Form.Control>\r\n      </Form.Group>\r\n    </Form>\r\n  );\r\n});\r\nexport default SelectGroupBy;\r\n","import React, { ChangeEvent, useCallback } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from 'mobx-react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { useStore } from '../../stores/storeConfig';\r\n\r\n\r\ninterface IProps { id: string }\r\n\r\nconst SelectGroupBy2: React.FC<IProps> = observer(({ id }) => {\r\n  const { t } = useTranslation();\r\n  const { filterStore } = useStore();\r\n  const { group2Dict, groupBy2, updateGroupBy2 } = filterStore;\r\n  const onSelectChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\r\n    updateGroupBy2(event.target.value);\r\n  }, [updateGroupBy2]);\r\n  return (\r\n    <Form className=\"form-inline\">\r\n      <Form.Group controlId={`GrupForm.${id}.SelectGroupBy2`}>\r\n        {/* <Form.Label className=\"filterLable\"> {t('GroupBy')}:</Form.Label> */}\r\n        <Form.Control\r\n          as=\"select\"\r\n          value={groupBy2.text}\r\n          onChange={onSelectChange}\r\n        >\r\n          {Object.entries(group2Dict).map(([key, x]: any[]) => (<option value={x.text} key={key}>{t(x.text)}</option>))}\r\n        </Form.Control>\r\n      </Form.Group>\r\n    </Form>\r\n  );\r\n});\r\nexport default SelectGroupBy2;\r\n","\r\nimport React, { FunctionComponent } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n// import { observer } from \"mobx-react\"\r\n// @ts-ignore\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\r\n\r\ninterface IProps {\r\n    dataName?:string\r\n    data: any[]\r\n    columns? :any[]\r\n  }\r\n\r\nconst foramtDataPrecision = (data: any[]) => {\r\n  const data2 = data.map((x) => {\r\n    if (typeof x.count === 'number' && !Number.isInteger(x.count)) {\r\n      return { _id : x._id, count: x.count.toFixed(1) };\r\n    }\r\n    return { _id : x._id, count: x.count};\r\n  });\r\n  return data2;\r\n};\r\n\r\nconst GroupByTable:FunctionComponent<IProps> = ({ dataName = 'Year', columns, data }) => {\r\n  // do format only grp1 and not grpBy2\r\n  const data1 = (columns === undefined) ? foramtDataPrecision(data) : data;\r\n  const { t } = useTranslation();\r\n  // let reactColumns = 1;\r\n  const reactColumns = (columns === undefined) ? [{\r\n    dataField: '_id',\r\n    text: t(dataName),\r\n  }, {\r\n    dataField: 'count',\r\n    text: t('casualties'),\r\n  }] : columns;\r\n  if (data != null) {\r\n    return (\r\n      <div className=\"groupByTable\">\r\n        <BootstrapTable keyField=\"_id\" data={data1} columns={reactColumns} headerClasses=\"table-header\" />\r\n      </div>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nexport default GroupByTable;\r\n","import React, { FunctionComponent } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from 'mobx-react';\r\nimport { toJS } from 'mobx';\r\nimport { useStore } from '../../stores/storeConfig';\r\nimport GroupByTable from '../molecules/GroupByTable';\r\nimport SmallCard from '../atoms/SmallCard';\r\nimport SelectGroupBy from '../atoms/SelectGroupBy';\r\nimport SelectGroupBy2 from '../atoms/SelectGroupBy2';\r\n\r\ninterface IProps { }\r\nexport const GroupByTablesPanel: FunctionComponent<IProps> = () => {\r\n  const style = {\r\n    marginLeft: '0',\r\n    marginRight: '0',\r\n    marginTop: '20px',\r\n  };\r\n  return (\r\n    <div className=\"row\" style={style}>\r\n      <GroupTablesYears />\r\n      <GroupTablesYears2 />\r\n      <GroupTablesFilter />\r\n      <GroupTables2Grp />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst GroupTablesYears: FunctionComponent<IProps> = observer(() => {\r\n  const { t } = useTranslation();\r\n  const { filterStore } = useStore();\r\n  const { dataByYears, casualtiesNames } = filterStore;\r\n  const reactData1 = toJS(dataByYears);\r\n  if (reactData1.length > 0) {\r\n    return (\r\n      <SmallCard title={`${t(casualtiesNames)} ${t('in-region')}, ${t('by-years')}`}>\r\n        <GroupByTable data={reactData1} />\r\n      </SmallCard>\r\n    );\r\n  }\r\n  return null;\r\n});\r\nconst GroupTablesYears2: FunctionComponent<IProps> = observer(() => {\r\n  const { t } = useTranslation();\r\n  const { filterStore } = useStore();\r\n  const { dataFilterdByYears, casualtiesNames } = filterStore;\r\n  const reactData2 = toJS(dataFilterdByYears);\r\n  if (reactData2.length > 0) {\r\n    return (\r\n      <SmallCard title={`${t(casualtiesNames)} ${t('by-years')}`}>\r\n        <GroupByTable data={reactData2} />\r\n      </SmallCard>\r\n    );\r\n  }\r\n  return null;\r\n});\r\nconst GroupTablesFilter: FunctionComponent<IProps> = observer(() => {\r\n  const { filterStore } = useStore();\r\n  const { dataFilterd, groupBy } = filterStore;\r\n  const reactData = toJS(dataFilterd);\r\n  if (reactData.length > 0) {\r\n    return (\r\n      <SmallCard styleType={1}>\r\n        <SelectGroupBy id=\"Tables.Main\" />\r\n        <GroupByTable data={reactData} dataName={groupBy.text} />\r\n      </SmallCard>\r\n    );\r\n  }\r\n  return null;\r\n});\r\n\r\nconst GroupTables2Grp: FunctionComponent<IProps> = observer(() => {\r\n  const divStyle = {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  } as React.CSSProperties;\r\n  const styleLable = {\r\n    fontWeight: 700,\r\n    marginTop: '5px',\r\n    marginLeft: '20px',\r\n    marginRight: '20px',\r\n  };\r\n  const { t } = useTranslation();\r\n  const { filterStore } = useStore();\r\n  const { groupBy, groupBy2, dataGroupby2 } = filterStore;\r\n  const columnsGrp2 = groupBy2.getColumns().map((x:any) => ({ dataField: x, text: t(x) }));\r\n  const reactDataGrp2 = toJS(dataGroupby2);\r\n  const show = (groupBy.text !== 'CityByPop');\r\n  if (reactDataGrp2.length > 0) {\r\n    return (\r\n      <div>\r\n        {show\r\n       && (\r\n       <SmallCard styleType={4}>\r\n         <div style={divStyle}>\r\n           <span style={styleLable}>\r\n             {' '}\r\n             {t('GroupBy')}\r\n             :\r\n           </span>\r\n           <SelectGroupBy id=\"Tables.Grp2\" labelText=\"\" />\r\n           <SelectGroupBy2 id=\"Tables\" />\r\n         </div>\r\n         <GroupByTable data={reactDataGrp2} dataName={groupBy.text} columns={columnsGrp2} />\r\n       </SmallCard>\r\n       )}\r\n      </div>\r\n    );\r\n  }\r\n  return null;\r\n});\r\nexport default GroupByTablesPanel;\r\n"],"sourceRoot":""}