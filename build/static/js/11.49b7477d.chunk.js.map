{"version":3,"sources":["components/atoms/CasualtiesSumLabel.tsx","components/organisms/AccidentsTable.tsx"],"names":["CasualtiesSumLabel","observer","length","name","t","useTranslation","casualtiesNames","useStore","filterStore","nameSpan","getColumnsByWidth","width","columns1","dataField","text","hidden","sort","colCity","colStreet","columns3","columns4","columns","splice","concat","AccidentsTable","divStyle","display","justifyContent","reactMarkers","toJS","dataAllInjuries","ExportCSVButton","CSVExport","useState","window","innerWidth","setColumns","React","useEffect","handleResize","cols","addEventListener","removeEventListener","cityResult","keyField","data","exportCSV","props","baseProps","pagination","paginationFactory","headerClasses","style","className","csvProps"],"mappings":"2OAgCeA,EAtB8BC,aAAS,YAAuB,IAApBC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,KACvDC,EAAMC,cAAND,EAEAE,EADgBC,cAAhBC,YACAF,gBACFG,EAAWN,EAAI,UAAMA,EAAN,MAAiB,GACtC,OAAID,EAAS,EAET,4BACGO,EACAL,EAAE,SACF,IACAF,EACA,IACAE,EAAEE,GACF,KAKL,4BAAKF,EAAE,sBCdLM,EAAoB,SAACC,EAAeP,GACxC,IAAMQ,EAAW,CAAC,CAChBC,UAAW,MACXC,KAAM,KACNC,QAAQ,GACP,CACDF,UAAW,gBACXC,KAAMV,EAAE,QACRY,MAAM,GACL,CACDH,UAAW,yBACXC,KAAMV,EAAE,YACRY,MAAM,GACL,CACDH,UAAW,sBACXC,KAAMV,EAAE,eACRY,MAAM,IAEFC,EAAU,CACdJ,UAAW,uBACXC,KAAMV,EAAE,QACRY,MAAM,GAEFE,EAAY,CAChBL,UAAW,iBACXC,KAAMV,EAAE,UACRY,MAAM,GAEFG,EAAW,CAAC,CAChBN,UAAW,8BACXC,KAAMV,EAAE,WACRY,MAAM,GACL,CACDH,UAAW,uBACXC,KAAMV,EAAE,gBACRY,MAAM,IAEFI,EAAW,CAAC,CAChBP,UAAW,mBACXC,KAAMV,EAAE,OACRY,MAAM,GACL,CACDH,UAAW,aACXC,KAAMV,EAAE,UACRY,MAAM,IAGJK,EAAUT,EAKd,OAJID,EAAQ,KAAKU,EAAQC,OAAO,EAAG,EAAGL,GAClCN,EAAQ,KAAKU,EAAQC,OAAO,EAAG,EAAGJ,GAClCP,EAAQ,MAAKU,EAAUA,EAAQE,OAAOJ,IAC1CE,EAAUA,EAAQE,OAAOH,IAKrBI,EAAmCvB,aAAS,WAAO,IAC/CO,EAAgBD,cAAhBC,YACAJ,EAAMC,cAAND,EACFqB,EAAW,CACfC,QAAS,OACTC,eAAgB,YAEZC,EAAeC,YAAKrB,EAAYsB,iBAC9BC,EAAoBC,YAApBD,gBAR8C,EASxBE,mBAASvB,EAAkBwB,OAAOC,WAAY/B,IATtB,mBAS/CiB,EAT+C,KAStCe,EATsC,KAkBtD,OARAC,IAAMC,WAAU,WACd,SAASC,IACP,IAAMC,EAAO9B,EAAkBwB,OAAOC,WAAY/B,GAClDgC,EAAWI,GAGb,OADAN,OAAOO,iBAAiB,SAAUF,GAC1B,WAAQL,OAAOQ,oBAAoB,SAAUH,OAEnDX,EAAa1B,OAAS,EAEtB,6BACE,kBAAC,EAAD,CAAoBA,OAAQ0B,EAAa1B,OAAQC,KAAMK,EAAYmC,aACnE,kBAAC,IAAD,CACEC,SAAS,KACTC,KAAMjB,EACNP,QAASA,EACTyB,WAAS,IAGC,SAACC,GAAD,OACE,6BACE,kBAAC,IAAD,iBAAoBA,EAAMC,UAA1B,CAAqCC,WAAYC,MAAqBC,cAAc,kBACpF,6BACA,yBAAKC,MAAO3B,GACV,kBAACM,EAAD,eAAiBsB,UAAU,aAAgBN,EAAMO,UAAWlD,EAAE,wBAUpF,kBAAC,EAAD,CAAoBF,OAAQ0B,EAAa1B,OAAQC,KAAMK,EAAYmC,gBAGxDnB","file":"static/js/11.49b7477d.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from 'mobx-react';\r\nimport { useStore } from '../../stores/storeConfig';\r\n\r\ninterface IProps {\r\n    length:number,\r\n    name?: string\r\n  }\r\nconst CasualtiesSumLabel: React.FC<IProps> = observer(({ length, name }) => {\r\n  const { t } = useTranslation();\r\n  const { filterStore } = useStore();\r\n  const { casualtiesNames } = filterStore;\r\n  const nameSpan = name ? `${name}- ` : '';\r\n  if (length > 0) {\r\n    return (\r\n      <h4>\r\n        {nameSpan}\r\n        {t('Found')}\r\n        {' '}\r\n        {length}\r\n        {' '}\r\n        {t(casualtiesNames)}\r\n        {' '}\r\n      </h4>\r\n    );\r\n  }\r\n  return (\r\n    <h4>{t('NoResultsFound')}</h4>\r\n  );\r\n});\r\nexport default CasualtiesSumLabel;\r\n","import React, { useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { toJS } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\n// @ts-ignore\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\n// @ts-ignore\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\n// @ts-ignore\r\nimport ToolkitProvider, { CSVExport } from 'react-bootstrap-table2-toolkit';\r\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\r\nimport 'react-bootstrap-table2-toolkit/dist/react-bootstrap-table2-toolkit.min.css';\r\nimport CasualtiesSumLabel from '../atoms/CasualtiesSumLabel';\r\nimport { useStore } from '../../stores/storeConfig';\r\n\r\nconst getColumnsByWidth = (width: number, t: any) => {\r\n  const columns1 = [{\r\n    dataField: '_id',\r\n    text: 'ID',\r\n    hidden: true,\r\n  }, {\r\n    dataField: 'accident_year',\r\n    text: t('Year'),\r\n    sort: true,\r\n  }, {\r\n    dataField: 'injury_severity_hebrew',\r\n    text: t('Severity'),\r\n    sort: true,\r\n  }, {\r\n    dataField: 'injured_type_hebrew',\r\n    text: t('TypeInjured'),\r\n    sort: true,\r\n  }];\r\n  const colCity = {\r\n    dataField: 'accident_yishuv_name',\r\n    text: t('City'),\r\n    sort: true,\r\n  };\r\n  const colStreet = {\r\n    dataField: 'street1_hebrew',\r\n    text: t('Street'),\r\n    sort: true,\r\n  };\r\n  const columns3 = [{\r\n    dataField: 'vehicle_vehicle_type_hebrew',\r\n    text: t('Vehicle'),\r\n    sort: true,\r\n  }, {\r\n    dataField: 'accident_type_hebrew',\r\n    text: t('AccidentType'),\r\n    sort: true,\r\n  }];\r\n  const columns4 = [{\r\n    dataField: 'age_group_hebrew',\r\n    text: t('Age'),\r\n    sort: true,\r\n  }, {\r\n    dataField: 'sex_hebrew',\r\n    text: t('Gender'),\r\n    sort: true,\r\n  }];\r\n\r\n  let columns = columns1;\r\n  if (width > 500) columns.splice(2, 0, colCity);\r\n  if (width > 700) columns.splice(3, 0, colStreet);\r\n  if (width > 900) columns = columns.concat(columns3);\r\n  columns = columns.concat(columns4);\r\n  return columns;\r\n};\r\n\r\ninterface IProps { }\r\nconst AccidentsTable: React.FC<IProps> = observer(() => {\r\n  const { filterStore } = useStore();\r\n  const { t } = useTranslation();\r\n  const divStyle = {\r\n    display: 'flex',\r\n    justifyContent: 'flex-end',\r\n  };\r\n  const reactMarkers = toJS(filterStore.dataAllInjuries);\r\n  const { ExportCSVButton } = CSVExport;\r\n  const [columns, setColumns] = useState(getColumnsByWidth(window.innerWidth, t));\r\n  React.useEffect(() => {\r\n    function handleResize() {\r\n      const cols = getColumnsByWidth(window.innerWidth, t);\r\n      setColumns(cols);\r\n    }\r\n    window.addEventListener('resize', handleResize);\r\n    return (() => { window.removeEventListener('resize', handleResize); });\r\n  });\r\n  if (reactMarkers.length > 0) {\r\n    return (\r\n      <div>\r\n        <CasualtiesSumLabel length={reactMarkers.length} name={filterStore.cityResult} />\r\n        <ToolkitProvider\r\n          keyField=\"id\"\r\n          data={reactMarkers}\r\n          columns={columns}\r\n          exportCSV\r\n        >\r\n          {\r\n                    (props: any) => (\r\n                      <div>\r\n                        <BootstrapTable {...props.baseProps} pagination={paginationFactory()} headerClasses=\"table-header\" />\r\n                        <hr />\r\n                        <div style={divStyle}>\r\n                          <ExportCSVButton className=\"button-sm\" {...props.csvProps}>{t('export-to-csv')}</ExportCSVButton>\r\n                        </div>\r\n                      </div>\r\n                    )\r\n                }\r\n        </ToolkitProvider>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <CasualtiesSumLabel length={reactMarkers.length} name={filterStore.cityResult} />\r\n  );\r\n});\r\nexport default AccidentsTable;\r\n"],"sourceRoot":""}