{"version":3,"file":"static/js/437.e3f585b6.chunk.js","mappings":"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","sources":["components/atoms/Select.tsx","components/atoms/ButtonToggle.tsx","components/organisms/MyImageGallery.tsx"],"sourcesContent":["import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\ninterface IProps {\r\n  label?: string;\r\n  id: string;\r\n  data: any[];\r\n  value: string;\r\n  onChange: (val: string) => void;\r\n}\r\nconst styleSelect = {\r\n  width: '150px',\r\n};\r\n\r\nconst Select: React.FC<IProps> = ({ label, id, data, value, onChange }) => {\r\n  const { t } = useTranslation();\r\n  const opttions = data.map((x: any, index) => <option value={x.val} key={index}>{t(x.text)}</option>)\r\n  return (\r\n    <div>\r\n      <Form.Group as={Col} controlId={id}>\r\n        {label && <Form.Label className=\"selectLabel\">\r\n          {t(label)}:\r\n        </Form.Label>}\r\n        <Form.Control\r\n          as=\"select\"\r\n          className=\"form-select form-select-sm\"\r\n          style={styleSelect}\r\n          value={value}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => { onChange(e.target.value); }}\r\n        >\r\n          {opttions}\r\n        </Form.Control>\r\n      </Form.Group>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Select;\r\n","\r\nimport React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\ninterface IProps {\r\n  condtion: boolean,\r\n  textTrue: string,\r\n  textFalse: string,\r\n  disabled?: boolean,\r\n  style?: any,\r\n  onClick: () => void\r\n}\r\nconst ButtonToggle: React.FC<IProps> = ({\r\n  condtion, textTrue, textFalse, disabled = false ,onClick,style\r\n} : IProps) => {\r\n  const { t } = useTranslation();\r\n  return (\r\n    <Button\r\n      className=\"btn-sm\"\r\n      variant=\"primary\"\r\n      disabled = {disabled}\r\n      onClick={() => { onClick(); }}\r\n      style={{...style}}\r\n    >\r\n      {condtion ? t(textTrue) : t(textFalse)}\r\n    </Button>\r\n  );\r\n};\r\nexport default ButtonToggle;\r\n","import React, { useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { observer } from 'mobx-react';\r\nimport { toJS } from 'mobx';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ImageGallery from \"react-image-gallery\";\r\nimport 'react-image-gallery/styles/css/image-gallery.css';\r\nimport ButtonToggle from '../atoms/ButtonToggle';\r\nimport Select from '../atoms/Select';\r\nimport { useStore } from '../../stores/storeConfig';\r\nimport SmallCard2 from '../atoms/SmallCard2';\r\nimport {API_URL} from '../../utils/globalEnvs';\r\n\r\ninterface Props {\r\n  type: string;\r\n}\r\n\r\nconst styles = {\r\n  divImageGallery: {\r\n    width:0,\r\n    minWidth: '100%',\r\n  },\r\n  styleCol: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n  }\r\n};\r\n\r\nconst MyImageGallery: React.FC<Props> = observer(({ type }) => {\r\n  const { imageStore, uiStore } = useStore();\r\n  const {\r\n    getImages, setCurrImage, imageList, tagsArr, setCurrTag, currTag,\r\n  } = imageStore;\r\n  const { language } = uiStore;\r\n  const isRTL = (language !== 'en');\r\n  useEffect(() => {\r\n    getImages(type);\r\n  }, [getImages, type]);\r\n  const apiUrl = API_URL || '';\r\n  const titleKey = `title${language}`;\r\n  const destkey = `text${language}`;\r\n  const arrayImagesProps = toJS(imageList);\r\n  const images = arrayImagesProps.map((x: any) => ({\r\n    original: `${apiUrl}/api/v1/img/${x.filename}`,\r\n    thumbnail: `${apiUrl}/api/v1/img/${x.filename}`,\r\n    originalTitle: x[titleKey],\r\n    description: x[destkey],\r\n  }));\r\n  const isGotImages = (images.length > 0);\r\n  const handleOnSlide = (currentIndex: number) => {\r\n    if (arrayImagesProps.length > 0) setCurrImage(arrayImagesProps[currentIndex]);\r\n    return true;\r\n  };\r\n\r\n  return (\r\n    <SmallCard2>\r\n      <div style={styles.divImageGallery}>\r\n      <Row >\r\n        <Col md={3} style={styles.styleCol}>\r\n          <Select\r\n            id='exampleForm.SelectTag'\r\n            value={currTag}\r\n            data={tagsArr}\r\n            onChange={(val: string) => setCurrTag(val)}\r\n          />\r\n          {/* <SelectImageByTag onChange={(val: string) => setCurrTag(val)} /> */}\r\n        </Col>\r\n        <Col xs={12} md={6}>\r\n          {isGotImages && <ImageTitle />}\r\n        </Col>\r\n        <Col md={3} style={styles.styleCol}>\r\n          {isGotImages && <ButtonToggleHideDescription />}\r\n        </Col>\r\n      </Row>\r\n      <hr />\r\n      {isGotImages && (\r\n        <ImageGallery\r\n          items={images}\r\n          isRTL={isRTL}\r\n          onSlide={(currentIndex: number) => handleOnSlide(currentIndex)}\r\n        />\r\n      )}\r\n      {!isGotImages && <ImageMsg />}\r\n      </div>\r\n    </SmallCard2>\r\n  );\r\n});\r\n\r\nconst styleButtonToggle = {\r\n  width: 'auto'\r\n};\r\nconst ButtonToggleHideDescription: React.FC<{}> = observer(() => {\r\n  const { imageStore } = useStore();\r\n  const { hideDescription, toggleHideDescription } = imageStore;\r\n  return (\r\n    <div style={styleButtonToggle}>\r\n      <ButtonToggle\r\n        condtion={hideDescription}\r\n        textTrue=\"show-description\"\r\n        textFalse=\"hide-description\"\r\n        onClick={toggleHideDescription}\r\n      />\r\n    </div>\r\n  );\r\n});\r\n\r\nconst styleTitle: React.CSSProperties = {\r\n  textAlign: 'center',\r\n  fontWeight: 700,\r\n  fontSize: 18,\r\n  margin: '10px',\r\n};\r\nconst ImageTitle: React.FC<{}> = observer(() => {\r\n  const { imageStore, uiStore } = useStore();\r\n  const { currImage } = imageStore;\r\n  const { language } = uiStore;\r\n  const titleKey = `title${language}`;\r\n  // @ts-ignore\r\n  const title: string = (currImage !== null) ? currImage[titleKey] : '';\r\n  return (\r\n    <div style={styleTitle}>{title}</div>\r\n  );\r\n});\r\n\r\nconst ImageMsg: React.FC<{}> = observer(() => {\r\n  const { t } = useTranslation();\r\n  const { imageStore } = useStore();\r\n  const { isLoading } = imageStore;\r\n  return (\r\n    <span>{(isLoading) ? `${t('Loading')}` : `${t('not-found-images')}`}</span>\r\n  );\r\n});\r\n\r\nexport default MyImageGallery;\r\n"],"names":["styleSelect","width","_ref","label","id","data","value","onChange","t","useTranslation","opttions","map","x","index","_jsx","val","children","text","_jsxs","Form","Group","as","Col","controlId","Label","className","Control","style","e","target","condtion","textTrue","textFalse","disabled","onClick","Button","variant","styles","divImageGallery","minWidth","styleCol","display","justifyContent","MyImageGallery","observer","type","imageStore","uiStore","useStore","getImages","setCurrImage","imageList","tagsArr","setCurrTag","currTag","language","isRTL","useEffect","apiUrl","API_URL","titleKey","destkey","arrayImagesProps","toJS","images","original","filename","thumbnail","originalTitle","description","isGotImages","length","SmallCard2","Row","md","Select","xs","ImageTitle","ButtonToggleHideDescription","ImageGallery","items","onSlide","currentIndex","handleOnSlide","ImageMsg","styleButtonToggle","hideDescription","toggleHideDescription","ButtonToggle","styleTitle","textAlign","fontWeight","fontSize","margin","currImage","title","isLoading"],"sourceRoot":""}